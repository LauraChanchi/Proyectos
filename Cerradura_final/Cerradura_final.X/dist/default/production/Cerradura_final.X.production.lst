

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Jun 21 09:16:22 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.20
    38                           ; Generated 12/02/2020 GMT
    39                           ; 
    40                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  000E                     	;# 
    87  000F                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0014                     	;# 
    93  0015                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001D                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  0081                     	;# 
   107  0085                     	;# 
   108  0086                     	;# 
   109  0087                     	;# 
   110  0088                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  008F                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  0105                     	;# 
   213  0107                     	;# 
   214  0108                     	;# 
   215  0109                     	;# 
   216  010C                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0185                     	;# 
   222  0187                     	;# 
   223  0188                     	;# 
   224  0189                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  000E                     	;# 
   243  000F                     	;# 
   244  0010                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0014                     	;# 
   249  0015                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0017                     	;# 
   253  0018                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001D                     	;# 
   260  001E                     	;# 
   261  001F                     	;# 
   262  0081                     	;# 
   263  0085                     	;# 
   264  0086                     	;# 
   265  0087                     	;# 
   266  0088                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305  0000                     	;# 
   306  0001                     	;# 
   307  0002                     	;# 
   308  0003                     	;# 
   309  0004                     	;# 
   310  0005                     	;# 
   311  0006                     	;# 
   312  0007                     	;# 
   313  0008                     	;# 
   314  0009                     	;# 
   315  000A                     	;# 
   316  000B                     	;# 
   317  000C                     	;# 
   318  000D                     	;# 
   319  000E                     	;# 
   320  000E                     	;# 
   321  000F                     	;# 
   322  0010                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0014                     	;# 
   327  0015                     	;# 
   328  0015                     	;# 
   329  0016                     	;# 
   330  0017                     	;# 
   331  0018                     	;# 
   332  0019                     	;# 
   333  001A                     	;# 
   334  001B                     	;# 
   335  001B                     	;# 
   336  001C                     	;# 
   337  001D                     	;# 
   338  001E                     	;# 
   339  001F                     	;# 
   340  0081                     	;# 
   341  0085                     	;# 
   342  0086                     	;# 
   343  0087                     	;# 
   344  0088                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383                           
   384                           	psect	idataBANK0
   385  0080                     __pidataBANK0:
   386                           
   387                           ;initializer for _password
   388  0080  34A9               	retlw	169
   389  0081  341C               	retlw	28
   390                           
   391                           	psect	strings
   392  0003                     __pstrings:
   393  0003                     stringtab:
   394  0003                     __stringtab:
   395                           
   396                           ;	String table - string pointers are 1 byte each
   397  0003  1BFF               	btfsc	btemp+1,7
   398  0004  280D               	ljmp	stringcode
   399  0005  1383               	bcf	3,7
   400  0006  187F               	btfsc	btemp+1,0
   401  0007  1783               	bsf	3,7
   402  0008  0800               	movf	0,w
   403  0009  0A84               	incf	4,f
   404  000A  1903               	skipnz
   405  000B  0AFF               	incf	btemp+1,f
   406  000C  0008               	return
   407  000D                     stringcode:
   408  000D                     stringdir:
   409  000D  3000               	movlw	high stringdir
   410  000E  008A               	movwf	10
   411  000F  0804               	movf	4,w
   412  0010  0A84               	incf	4,f
   413  0011  0782               	addwf	2,f
   414  0012                     __stringbase:
   415  0012  3400               	retlw	0
   416  0013                     __end_of__stringtab:
   417  0013                     _dpowers:
   418  0013  3401               	retlw	1
   419  0014  3400               	retlw	0
   420  0015  340A               	retlw	10
   421  0016  3400               	retlw	0
   422  0017  3464               	retlw	100
   423  0018  3400               	retlw	0
   424  0019  34E8               	retlw	232
   425  001A  3403               	retlw	3
   426  001B  3410               	retlw	16
   427  001C  3427               	retlw	39
   428  001D                     __end_of_dpowers:
   429  0006                     _PORTB	set	6
   430  0007                     _PORTC	set	7
   431  0008                     _PORTD	set	8
   432  0036                     _RB6	set	54
   433  0035                     _RB5	set	53
   434  0034                     _RB4	set	52
   435  003A                     _RC2	set	58
   436  0039                     _RC1	set	57
   437  0038                     _RC0	set	56
   438  0043                     _RD3	set	67
   439  0042                     _RD2	set	66
   440  0047                     _RD7	set	71
   441  0046                     _RD6	set	70
   442  0045                     _RD5	set	69
   443  0044                     _RD4	set	68
   444  0086                     _TRISB	set	134
   445  0087                     _TRISC	set	135
   446  0088                     _TRISD	set	136
   447  001D                     STR_4:
   448  001D  3443               	retlw	67	;'C'
   449  001E  3465               	retlw	101	;'e'
   450  001F  3472               	retlw	114	;'r'
   451  0020  3472               	retlw	114	;'r'
   452  0021  3461               	retlw	97	;'a'
   453  0022  3464               	retlw	100	;'d'
   454  0023  3475               	retlw	117	;'u'
   455  0024  3472               	retlw	114	;'r'
   456  0025  3461               	retlw	97	;'a'
   457  0026  3420               	retlw	32	;' '
   458  0027  3445               	retlw	69	;'E'
   459  0028  3465               	retlw	101	;'e'
   460  0029  346C               	retlw	108	;'l'
   461  002A  3465               	retlw	101	;'e'
   462  002B  3463               	retlw	99	;'c'
   463  002C  3474               	retlw	116	;'t'
   464  002D  3472               	retlw	114	;'r'
   465  002E  346F               	retlw	111	;'o'
   466  002F  346E               	retlw	110	;'n'
   467  0030  3469               	retlw	105	;'i'
   468  0031  3463               	retlw	99	;'c'
   469  0032  3461               	retlw	97	;'a'
   470  0033  3400               	retlw	0
   471  0034                     STR_5:
   472  0034  3449               	retlw	73	;'I'
   473  0035  346E               	retlw	110	;'n'
   474  0036  3467               	retlw	103	;'g'
   475  0037  3472               	retlw	114	;'r'
   476  0038  3465               	retlw	101	;'e'
   477  0039  3473               	retlw	115	;'s'
   478  003A  3465               	retlw	101	;'e'
   479  003B  3420               	retlw	32	;' '
   480  003C  3443               	retlw	67	;'C'
   481  003D  346C               	retlw	108	;'l'
   482  003E  3461               	retlw	97	;'a'
   483  003F  3476               	retlw	118	;'v'
   484  0040  3465               	retlw	101	;'e'
   485  0041  343A               	retlw	58	;':'
   486  0042  3400               	retlw	0
   487  0043                     STR_18:
   488  0043  3449               	retlw	73	;'I'
   489  0044  346E               	retlw	110	;'n'
   490  0045  3463               	retlw	99	;'c'
   491  0046  346F               	retlw	111	;'o'
   492  0047  3472               	retlw	114	;'r'
   493  0048  3472               	retlw	114	;'r'
   494  0049  3465               	retlw	101	;'e'
   495  004A  3463               	retlw	99	;'c'
   496  004B  3474               	retlw	116	;'t'
   497  004C  3461               	retlw	97	;'a'
   498  004D  3400               	retlw	0
   499  004E                     STR_2:
   500  004E  3442               	retlw	66	;'B'
   501  004F  346C               	retlw	108	;'l'
   502  0050  346F               	retlw	111	;'o'
   503  0051  3471               	retlw	113	;'q'
   504  0052  3475               	retlw	117	;'u'
   505  0053  3465               	retlw	101	;'e'
   506  0054  3461               	retlw	97	;'a'
   507  0055  3464               	retlw	100	;'d'
   508  0056  3461               	retlw	97	;'a'
   509  0057  3400               	retlw	0
   510  0058                     STR_8:
   511  0058  3443               	retlw	67	;'C'
   512  0059  346C               	retlw	108	;'l'
   513  005A  3461               	retlw	97	;'a'
   514  005B  3476               	retlw	118	;'v'
   515  005C  3465               	retlw	101	;'e'
   516  005D  343A               	retlw	58	;':'
   517  005E  3420               	retlw	32	;' '
   518  005F  3425               	retlw	37	;'%'
   519  0060  3469               	retlw	105	;'i'
   520  0061  3400               	retlw	0
   521  0062                     STR_16:
   522  0062  3443               	retlw	67	;'C'
   523  0063  346F               	retlw	111	;'o'
   524  0064  3472               	retlw	114	;'r'
   525  0065  3472               	retlw	114	;'r'
   526  0066  3465               	retlw	101	;'e'
   527  0067  3463               	retlw	99	;'c'
   528  0068  3474               	retlw	116	;'t'
   529  0069  3461               	retlw	97	;'a'
   530  006A  3400               	retlw	0
   531  006B                     STR_15:
   532  006B  3443               	retlw	67	;'C'
   533  006C  346C               	retlw	108	;'l'
   534  006D  3461               	retlw	97	;'a'
   535  006E  3476               	retlw	118	;'v'
   536  006F  3465               	retlw	101	;'e'
   537  0070  3400               	retlw	0
   538  0071                     STR_3:
   539  0071  342A               	retlw	42	;'*'
   540  0072  342A               	retlw	42	;'*'
   541  0073  342A               	retlw	42	;'*'
   542  0074  342A               	retlw	42	;'*'
   543  0075  3400               	retlw	0
   544  0076                     STR_6:
   545  0076  345F               	retlw	95	;'_'
   546  0077  345F               	retlw	95	;'_'
   547  0078  345F               	retlw	95	;'_'
   548  0079  345F               	retlw	95	;'_'
   549  007A  3400               	retlw	0
   550  007B                     STR_1:
   551  007B  3443               	retlw	67	;'C'
   552  007C  3461               	retlw	97	;'a'
   553  007D  346A               	retlw	106	;'j'
   554  007E  3461               	retlw	97	;'a'
   555  007F  3400               	retlw	0
   556  0074                     
   557                           	psect	cinit
   558  07E7                     start_initialization:	
   559                           ; #config settings
   560                           
   561  07E7                     __initialization:
   562                           
   563                           ; Initialize objects allocated to BANK0
   564  07E7  120A  118A  2080  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   565  07EC  00DB               	movwf	__pdataBANK0& (0+127)
   566  07ED  120A  118A  2081  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   567  07F2  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   568                           
   569                           ; Clear objects allocated to BANK0
   570  07F3  1383               	bcf	3,7	;select IRP bank0
   571  07F4  3049               	movlw	low __pbssBANK0
   572  07F5  0084               	movwf	4
   573  07F6  305B               	movlw	low (__pbssBANK0+18)
   574  07F7  120A  158A  2749  120A  118A  	fcall	clear_ram0
   575  07FC                     end_of_initialization:	
   576                           ;End of C runtime variable initialization code
   577                           
   578  07FC                     __end_of__initialization:
   579  07FC  0183               	clrf	3
   580  07FD  120A  118A  2C80   	ljmp	_main	;jump to C main() function
   581                           
   582                           	psect	bssBANK0
   583  0049                     __pbssBANK0:
   584  0049                     _x:
   585  0049                     	ds	2
   586  004B                     _Estado:
   587  004B                     	ds	2
   588  004D                     _clave:
   589  004D                     	ds	2
   590  004F                     _y4:
   591  004F                     	ds	2
   592  0051                     _y3:
   593  0051                     	ds	2
   594  0053                     _y2:
   595  0053                     	ds	2
   596  0055                     _verifi:
   597  0055                     	ds	2
   598  0057                     _intentos:
   599  0057                     	ds	2
   600  0059                     _y1:
   601  0059                     	ds	2
   602                           
   603                           	psect	dataBANK0
   604  005B                     __pdataBANK0:
   605  005B                     _password:
   606  005B                     	ds	2
   607                           
   608                           	psect	clrtext
   609  0F49                     clear_ram0:	
   610                           ;	Called with FSR containing the base address, and
   611                           ;	W with the last address+1
   612                           
   613  0F49  0064               	clrwdt	;clear the watchdog before getting into this loop
   614  0F4A                     clrloop0:
   615  0F4A  0180               	clrf	0	;clear RAM location pointed to by FSR
   616  0F4B  0A84               	incf	4,f	;increment pointer
   617  0F4C  0604               	xorwf	4,w	;XOR with final address
   618  0F4D  1903               	btfsc	3,2	;have we reached the end yet?
   619  0F4E  3400               	retlw	0	;all done for this memory range, return
   620  0F4F  0604               	xorwf	4,w	;XOR again to restore value
   621  0F50  2F4A               	goto	clrloop0	;do the next byte
   622                           
   623                           	psect	cstackCOMMON
   624  0070                     __pcstackCOMMON:
   625  0070                     ?_Leer_tecla:
   626  0070                     ??_Leer_tecla:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ?_Lcd_Port:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ??_Lcd_Port:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?_Lcd_Cmd:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ?_Lcd_Clear:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0070                     ?_Lcd_Init:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0070                     ?_Lcd_Write_Char:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ?_Lcd_Shift_Right:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_Lcd_Shift_Left:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_prender_led_verde:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ??_prender_led_verde:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_prender_led_rojo:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ??_prender_led_rojo:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_apagar_led_rojo:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ??_apagar_led_rojo:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_pulsar_boton:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ??_pulsar_boton:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_Alarma:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_ver_clave:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_mover:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_main:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?___wmul:	
   690                           ; 2 bytes @ 0x0
   691                           
   692  0070                     ?___lwdiv:	
   693                           ; 2 bytes @ 0x0
   694                           
   695  0070                     Lcd_Port@a:	
   696                           ; 2 bytes @ 0x0
   697                           
   698  0070                     ___wmul@multiplier:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ___lwdiv@divisor:	
   702                           ; 2 bytes @ 0x0
   703                           
   704                           
   705                           ; 2 bytes @ 0x0
   706  0070                     	ds	1
   707  0071                     ??_Lcd_Cmd:
   708  0071                     ??_Lcd_Write_Char:	
   709                           ; 1 bytes @ 0x1
   710                           
   711                           
   712                           ; 1 bytes @ 0x1
   713  0071                     	ds	1
   714  0072                     Lcd_Write_Char@temp:
   715  0072                     ___wmul@multiplicand:	
   716                           ; 1 bytes @ 0x2
   717                           
   718  0072                     ___lwdiv@dividend:	
   719                           ; 2 bytes @ 0x2
   720                           
   721                           
   722                           ; 2 bytes @ 0x2
   723  0072                     	ds	1
   724  0073                     Lcd_Cmd@a:
   725  0073                     Lcd_Write_Char@y:	
   726                           ; 1 bytes @ 0x3
   727                           
   728                           
   729                           ; 1 bytes @ 0x3
   730  0073                     	ds	1
   731  0074                     ??_Lcd_Clear:
   732  0074                     ?_Lcd_Set_Cursor:	
   733                           ; 1 bytes @ 0x4
   734                           
   735  0074                     ??_Lcd_Init:	
   736                           ; 1 bytes @ 0x4
   737                           
   738  0074                     ??_Lcd_Shift_Right:	
   739                           ; 1 bytes @ 0x4
   740                           
   741  0074                     ??_Lcd_Shift_Left:	
   742                           ; 1 bytes @ 0x4
   743                           
   744  0074                     ??_mover:	
   745                           ; 1 bytes @ 0x4
   746                           
   747  0074                     ??___wmul:	
   748                           ; 1 bytes @ 0x4
   749                           
   750  0074                     ??___lwdiv:	
   751                           ; 1 bytes @ 0x4
   752                           
   753  0074                     Lcd_Set_Cursor@b:	
   754                           ; 1 bytes @ 0x4
   755                           
   756  0074                     Lcd_Write_Char@a:	
   757                           ; 1 bytes @ 0x4
   758                           
   759  0074                     ___wmul@product:	
   760                           ; 1 bytes @ 0x4
   761                           
   762                           
   763                           ; 2 bytes @ 0x4
   764  0074                     	ds	1
   765  0075                     ??_Lcd_Set_Cursor:
   766  0075                     ?_Lcd_Write_String:	
   767                           ; 1 bytes @ 0x5
   768                           
   769  0075                     Lcd_Write_String@a:	
   770                           ; 1 bytes @ 0x5
   771                           
   772  0075                     ___lwdiv@quotient:	
   773                           ; 2 bytes @ 0x5
   774                           
   775                           
   776                           ; 2 bytes @ 0x5
   777  0075                     	ds	2
   778  0077                     ??_Lcd_Write_String:
   779  0077                     Lcd_Set_Cursor@a:	
   780                           ; 1 bytes @ 0x7
   781                           
   782  0077                     ___lwdiv@counter:	
   783                           ; 1 bytes @ 0x7
   784                           
   785  0077                     Lcd_Write_String@i:	
   786                           ; 1 bytes @ 0x7
   787                           
   788  0077                     mover@c:	
   789                           ; 2 bytes @ 0x7
   790                           
   791                           
   792                           ; 2 bytes @ 0x7
   793  0077                     	ds	1
   794  0078                     ?___lwmod:
   795  0078                     Lcd_Set_Cursor@z:	
   796                           ; 2 bytes @ 0x8
   797                           
   798  0078                     ___lwmod@divisor:	
   799                           ; 1 bytes @ 0x8
   800                           
   801                           
   802                           ; 2 bytes @ 0x8
   803  0078                     	ds	1
   804  0079                     Lcd_Set_Cursor@y:
   805  0079                     mover@c_113:	
   806                           ; 1 bytes @ 0x9
   807                           
   808                           
   809                           ; 2 bytes @ 0x9
   810  0079                     	ds	1
   811  007A                     Lcd_Set_Cursor@temp:
   812  007A                     ___lwmod@dividend:	
   813                           ; 1 bytes @ 0xA
   814                           
   815                           
   816                           ; 2 bytes @ 0xA
   817  007A                     	ds	1
   818  007B                     ??_Alarma:
   819  007B                     ??_ver_clave:	
   820                           ; 1 bytes @ 0xB
   821                           
   822                           
   823                           ; 1 bytes @ 0xB
   824  007B                     	ds	1
   825  007C                     ??___lwmod:
   826                           
   827                           ; 1 bytes @ 0xC
   828  007C                     	ds	1
   829  007D                     ___lwmod@counter:
   830                           
   831                           ; 1 bytes @ 0xD
   832  007D                     	ds	1
   833                           
   834                           	psect	cstackBANK0
   835  0020                     __pcstackBANK0:
   836  0020                     ?_sprintf:
   837  0020                     ver_clave@buffer1:	
   838                           ; 2 bytes @ 0x0
   839                           
   840  0020                     sprintf@f:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0020                     Alarma@a:	
   844                           ; 1 bytes @ 0x0
   845                           
   846                           
   847                           ; 2 bytes @ 0x0
   848  0020                     	ds	3
   849  0023                     ??_sprintf:
   850                           
   851                           ; 1 bytes @ 0x3
   852  0023                     	ds	3
   853  0026                     sprintf@ap:
   854                           
   855                           ; 1 bytes @ 0x6
   856  0026                     	ds	1
   857  0027                     sprintf@flag:
   858                           
   859                           ; 1 bytes @ 0x7
   860  0027                     	ds	1
   861  0028                     sprintf@prec:
   862                           
   863                           ; 1 bytes @ 0x8
   864  0028                     	ds	1
   865  0029                     sprintf@val:
   866                           
   867                           ; 2 bytes @ 0x9
   868  0029                     	ds	2
   869  002B                     sprintf@sp:
   870                           
   871                           ; 1 bytes @ 0xB
   872  002B                     	ds	1
   873  002C                     sprintf@c:
   874                           
   875                           ; 1 bytes @ 0xC
   876  002C                     	ds	1
   877  002D                     ??_main:
   878                           
   879                           ; 1 bytes @ 0xD
   880  002D                     	ds	6
   881  0033                     main@buffer1:
   882                           
   883                           ; 20 bytes @ 0x13
   884  0033                     	ds	20
   885  0047                     main@tecla:
   886                           
   887                           ; 2 bytes @ 0x27
   888  0047                     	ds	2
   889                           
   890                           	psect	maintext
   891  0480                     __pmaintext:	
   892 ;;
   893 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   894 ;;
   895 ;; *************** function _main *****************
   896 ;; Defined at:
   897 ;;		line 83 in file "main.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  tecla           2   39[BANK0 ] int 
   902 ;;  buffer1        20   19[BANK0 ] unsigned char [20]
   903 ;; Return value:  Size  Location     Type
   904 ;;                  2  143[None  ] int 
   905 ;; Registers used:
   906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : B00/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   912 ;;      Params:         0       0       0       0       0
   913 ;;      Locals:         0      22       0       0       0
   914 ;;      Temps:          0       6       0       0       0
   915 ;;      Totals:         0      28       0       0       0
   916 ;;Total ram usage:       28 bytes
   917 ;; Hardware stack levels required when called: 4
   918 ;; This function calls:
   919 ;;		_Alarma
   920 ;;		_Lcd_Clear
   921 ;;		_Lcd_Init
   922 ;;		_Lcd_Set_Cursor
   923 ;;		_Lcd_Write_String
   924 ;;		_Leer_tecla
   925 ;;		___wmul
   926 ;;		_apagar_led_rojo
   927 ;;		_mover
   928 ;;		_prender_led_rojo
   929 ;;		_prender_led_verde
   930 ;;		_pulsar_boton
   931 ;;		_sprintf
   932 ;;		_ver_clave
   933 ;; This function is called by:
   934 ;;		Startup code after reset
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938  0480                     _main:	
   939                           ;psect for function _main
   940                           
   941  0480                     l1642:	
   942                           ;incstack = 0
   943                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   944                           
   945                           
   946                           ;main.c: 86:   char buffer1[20];;main.c: 88:   TRISD = 0x00;
   947  0480  1683               	bsf	3,5	;RP0=1, select bank1
   948  0481  1303               	bcf	3,6	;RP1=0, select bank1
   949  0482  0188               	clrf	8	;volatile
   950                           
   951                           ;main.c: 89:   TRISC = 0x00;
   952  0483  0187               	clrf	7	;volatile
   953  0484                     l1644:
   954                           
   955                           ;main.c: 90:   TRISB = 0xF0;
   956  0484  30F0               	movlw	240
   957  0485  0086               	movwf	6	;volatile
   958  0486                     l1646:
   959                           
   960                           ;main.c: 91:   PORTD = 0;
   961  0486  1283               	bcf	3,5	;RP0=0, select bank0
   962  0487  1303               	bcf	3,6	;RP1=0, select bank0
   963  0488  0188               	clrf	8	;volatile
   964  0489                     l1648:
   965                           
   966                           ;main.c: 92:   PORTC = 0;
   967  0489  0187               	clrf	7	;volatile
   968  048A                     l1650:
   969                           
   970                           ;main.c: 93:   PORTB = 0;
   971  048A  0186               	clrf	6	;volatile
   972  048B                     l1652:
   973                           
   974                           ;main.c: 95:   Lcd_Init();
   975  048B  120A  118A  2234  120A  118A  	fcall	_Lcd_Init
   976  0490                     l1654:
   977                           
   978                           ;main.c: 97:   Lcd_Clear();
   979  0490  120A  158A  2751  120A  118A  	fcall	_Lcd_Clear
   980  0495                     l1656:
   981                           
   982                           ;main.c: 99:   Lcd_Set_Cursor(1,1);
   983  0495  01F4               	clrf	Lcd_Set_Cursor@b
   984  0496  0AF4               	incf	Lcd_Set_Cursor@b,f
   985  0497  3001               	movlw	1
   986  0498  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
   987  049D                     l1658:
   988                           
   989                           ;main.c: 100:   Lcd_Write_String("Cerradura Eelectronica");
   990  049D  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   991  049E  00F5               	movwf	Lcd_Write_String@a
   992  049F  3080               	movlw	128
   993  04A0  00F6               	movwf	Lcd_Write_String@a+1
   994  04A1  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
   995  04A6                     l1660:
   996                           
   997                           ;main.c: 101:   mover();
   998  04A6  120A  118A  2193  120A  118A  	fcall	_mover
   999  04AB                     l1662:
  1000                           
  1001                           ;main.c: 104:   Lcd_Clear();
  1002  04AB  120A  158A  2751  120A  118A  	fcall	_Lcd_Clear
  1003  04B0                     l1664:
  1004                           
  1005                           ;main.c: 105:   Lcd_Set_Cursor(1,2);
  1006  04B0  3002               	movlw	2
  1007  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  1008  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  1009  04B3  00AD               	movwf	??_main
  1010  04B4  082D               	movf	??_main,w
  1011  04B5  00F4               	movwf	Lcd_Set_Cursor@b
  1012  04B6  3001               	movlw	1
  1013  04B7  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1014  04BC                     l1666:
  1015                           
  1016                           ;main.c: 106:   Lcd_Write_String("Ingrese Clave:");
  1017  04BC  3022               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1018  04BD  00F5               	movwf	Lcd_Write_String@a
  1019  04BE  3080               	movlw	128
  1020  04BF  00F6               	movwf	Lcd_Write_String@a+1
  1021  04C0  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1022  04C5                     l1668:
  1023                           
  1024                           ;main.c: 107:   Lcd_Set_Cursor(2,8);
  1025  04C5  3008               	movlw	8
  1026  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  1027  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  1028  04C8  00AD               	movwf	??_main
  1029  04C9  082D               	movf	??_main,w
  1030  04CA  00F4               	movwf	Lcd_Set_Cursor@b
  1031  04CB  3002               	movlw	2
  1032  04CC  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1033  04D1                     l1670:
  1034                           
  1035                           ;main.c: 108:   Lcd_Write_String("____");
  1036  04D1  3064               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1037  04D2  00F5               	movwf	Lcd_Write_String@a
  1038  04D3  3080               	movlw	128
  1039  04D4  00F6               	movwf	Lcd_Write_String@a+1
  1040  04D5  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1041  04DA                     l1672:
  1042                           
  1043                           ;main.c: 111:   prender_led_rojo();
  1044  04DA  120A  158A  2741  120A  118A  	fcall	_prender_led_rojo
  1045                           
  1046                           ;main.c: 114:   while(intentos<3 && verifi==0){
  1047  04DF  2FCD               	goto	l1804
  1048  04E0                     l1674:
  1049                           
  1050                           ;main.c: 116:       int tecla = Leer_tecla();
  1051  04E0  120A  118A  22F6  120A  118A  	fcall	_Leer_tecla
  1052  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1053  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1054  04E7  00AD               	movwf	??_main
  1055  04E8  01AE               	clrf	??_main+1
  1056  04E9  082D               	movf	??_main,w
  1057  04EA  00C7               	movwf	main@tecla
  1058  04EB  082E               	movf	??_main+1,w
  1059  04EC  00C8               	movwf	main@tecla+1
  1060  04ED                     l1676:
  1061                           
  1062                           ;main.c: 117:       _delay((unsigned long)((100)*(4000000/4000.0)));
  1063  04ED  3082               	movlw	130
  1064  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  1065  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  1066  04F0  00AE               	movwf	??_main+1
  1067  04F1  30DD               	movlw	221
  1068  04F2  00AD               	movwf	??_main
  1069  04F3                     u1257:
  1070  04F3  0BAD               	decfsz	??_main,f
  1071  04F4  2CF3               	goto	u1257
  1072  04F5  0BAE               	decfsz	??_main+1,f
  1073  04F6  2CF3               	goto	u1257
  1074  04F7                     l1678:
  1075                           
  1076                           ;main.c: 119:       if(tecla !=100 && tecla != 35 && tecla !=42 ){
  1077  04F7  3064               	movlw	100
  1078  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1079  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1080  04FA  0647               	xorwf	main@tecla,w
  1081  04FB  0448               	iorwf	main@tecla+1,w
  1082  04FC  1903               	btfsc	3,2
  1083  04FD  2CFF               	goto	u1121
  1084  04FE  2D00               	goto	u1120
  1085  04FF                     u1121:
  1086  04FF  2ECA               	goto	l1754
  1087  0500                     u1120:
  1088  0500                     l1680:
  1089  0500  3023               	movlw	35
  1090  0501  0647               	xorwf	main@tecla,w
  1091  0502  0448               	iorwf	main@tecla+1,w
  1092  0503  1903               	btfsc	3,2
  1093  0504  2D06               	goto	u1131
  1094  0505  2D07               	goto	u1130
  1095  0506                     u1131:
  1096  0506  2ECA               	goto	l1754
  1097  0507                     u1130:
  1098  0507                     l1682:
  1099  0507  302A               	movlw	42
  1100  0508  0647               	xorwf	main@tecla,w
  1101  0509  0448               	iorwf	main@tecla+1,w
  1102  050A  1903               	btfsc	3,2
  1103  050B  2D0D               	goto	u1141
  1104  050C  2D0E               	goto	u1140
  1105  050D                     u1141:
  1106  050D  2ECA               	goto	l1754
  1107  050E                     u1140:
  1108  050E                     l1684:
  1109                           
  1110                           ;main.c: 123:             if (Estado==0) {
  1111  050E  084B               	movf	_Estado,w
  1112  050F  044C               	iorwf	_Estado+1,w
  1113  0510  1D03               	btfss	3,2
  1114  0511  2D13               	goto	u1151
  1115  0512  2D14               	goto	u1150
  1116  0513                     u1151:
  1117  0513  2D5B               	goto	l1700
  1118  0514                     u1150:
  1119  0514                     l1686:
  1120                           
  1121                           ;main.c: 124:                 pulsar_boton();
  1122  0514  120A  158A  2778  120A  118A  	fcall	_pulsar_boton
  1123  0519                     l1688:
  1124                           
  1125                           ;main.c: 125:                 y1=tecla;
  1126  0519  1283               	bcf	3,5	;RP0=0, select bank0
  1127  051A  1303               	bcf	3,6	;RP1=0, select bank0
  1128  051B  0848               	movf	main@tecla+1,w
  1129  051C  00DA               	movwf	_y1+1
  1130  051D  0847               	movf	main@tecla,w
  1131  051E  00D9               	movwf	_y1
  1132  051F                     l1690:
  1133                           
  1134                           ;main.c: 126:                 clave=y1;
  1135  051F  085A               	movf	_y1+1,w
  1136  0520  00CE               	movwf	_clave+1
  1137  0521  0859               	movf	_y1,w
  1138  0522  00CD               	movwf	_clave
  1139                           
  1140                           ;main.c: 127:                 Lcd_Set_Cursor(2,8);
  1141  0523  3008               	movlw	8
  1142  0524  00AD               	movwf	??_main
  1143  0525  082D               	movf	??_main,w
  1144  0526  00F4               	movwf	Lcd_Set_Cursor@b
  1145  0527  3002               	movlw	2
  1146  0528  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1147  052D                     l1692:
  1148                           
  1149                           ;main.c: 128:                 Lcd_Write_String("*");
  1150  052D  3062               	movlw	(low (((STR_3+3)-__stringbase)| (0+32768)))& (0+255)
  1151  052E  00F5               	movwf	Lcd_Write_String@a
  1152  052F  3080               	movlw	128
  1153  0530  00F6               	movwf	Lcd_Write_String@a+1
  1154  0531  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1155  0536                     l1694:
  1156                           
  1157                           ;main.c: 129:                 _delay((unsigned long)((500)*(4000000/4000.0)));
  1158  0536  3003               	movlw	3
  1159  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1160  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1161  0539  00AF               	movwf	??_main+2
  1162  053A  308A               	movlw	138
  1163  053B  00AE               	movwf	??_main+1
  1164  053C  3055               	movlw	85
  1165  053D  00AD               	movwf	??_main
  1166  053E                     u1267:
  1167  053E  0BAD               	decfsz	??_main,f
  1168  053F  2D3E               	goto	u1267
  1169  0540  0BAE               	decfsz	??_main+1,f
  1170  0541  2D3E               	goto	u1267
  1171  0542  0BAF               	decfsz	??_main+2,f
  1172  0543  2D3E               	goto	u1267
  1173  0544                     l1696:
  1174                           
  1175                           ;main.c: 130:                 Estado++;
  1176  0544  3001               	movlw	1
  1177  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0546  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0547  07CB               	addwf	_Estado,f
  1180  0548  1803               	skipnc
  1181  0549  0ACC               	incf	_Estado+1,f
  1182  054A  3000               	movlw	0
  1183  054B  07CC               	addwf	_Estado+1,f
  1184  054C                     l1698:
  1185                           
  1186                           ;main.c: 132:                 sprintf(buffer1,"Clave: %i",clave);
  1187  054C  3046               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1188  054D  00AD               	movwf	??_main
  1189  054E  082D               	movf	??_main,w
  1190  054F  00A0               	movwf	sprintf@f
  1191  0550  084E               	movf	_clave+1,w
  1192  0551  00A2               	movwf	?_sprintf+2
  1193  0552  084D               	movf	_clave,w
  1194  0553  00A1               	movwf	?_sprintf+1
  1195  0554  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1196  0555  120A  118A  2398  120A  118A  	fcall	_sprintf
  1197                           
  1198                           ;main.c: 133:             }
  1199  055A  2ECA               	goto	l1754
  1200  055B                     l1700:
  1201  055B  034B               	decf	_Estado,w
  1202  055C  044C               	iorwf	_Estado+1,w
  1203  055D  1D03               	btfss	3,2
  1204  055E  2D60               	goto	u1161
  1205  055F  2D61               	goto	u1160
  1206  0560                     u1161:
  1207  0560  2DBB               	goto	l1718
  1208  0561                     u1160:
  1209  0561                     l1702:
  1210                           
  1211                           ;main.c: 135:                 pulsar_boton();
  1212  0561  120A  158A  2778  120A  118A  	fcall	_pulsar_boton
  1213  0566                     l1704:
  1214                           
  1215                           ;main.c: 136:                 y2=tecla;
  1216  0566  1283               	bcf	3,5	;RP0=0, select bank0
  1217  0567  1303               	bcf	3,6	;RP1=0, select bank0
  1218  0568  0848               	movf	main@tecla+1,w
  1219  0569  00D4               	movwf	_y2+1
  1220  056A  0847               	movf	main@tecla,w
  1221  056B  00D3               	movwf	_y2
  1222  056C                     l1706:
  1223                           
  1224                           ;main.c: 137:                 clave= 10*y1+tecla;
  1225  056C  085A               	movf	_y1+1,w
  1226  056D  00F1               	movwf	___wmul@multiplier+1
  1227  056E  0859               	movf	_y1,w
  1228  056F  00F0               	movwf	___wmul@multiplier
  1229  0570  300A               	movlw	10
  1230  0571  00F2               	movwf	___wmul@multiplicand
  1231  0572  3000               	movlw	0
  1232  0573  00F3               	movwf	___wmul@multiplicand+1
  1233  0574  120A  158A  27AB  120A  118A  	fcall	___wmul
  1234  0579  1283               	bcf	3,5	;RP0=0, select bank0
  1235  057A  1303               	bcf	3,6	;RP1=0, select bank0
  1236  057B  0847               	movf	main@tecla,w
  1237  057C  0770               	addwf	?___wmul,w
  1238  057D  00CD               	movwf	_clave
  1239  057E  0848               	movf	main@tecla+1,w
  1240  057F  1803               	skipnc
  1241  0580  0A48               	incf	main@tecla+1,w
  1242  0581  0771               	addwf	?___wmul+1,w
  1243  0582  00CE               	movwf	_clave+1
  1244  0583                     l1708:
  1245                           
  1246                           ;main.c: 139:                 Lcd_Set_Cursor(2,9);
  1247  0583  3009               	movlw	9
  1248  0584  00AD               	movwf	??_main
  1249  0585  082D               	movf	??_main,w
  1250  0586  00F4               	movwf	Lcd_Set_Cursor@b
  1251  0587  3002               	movlw	2
  1252  0588  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1253  058D                     l1710:
  1254                           
  1255                           ;main.c: 140:                 Lcd_Write_String("*");
  1256  058D  3062               	movlw	(low (((STR_3+3)-__stringbase)| (0+32768)))& (0+255)
  1257  058E  00F5               	movwf	Lcd_Write_String@a
  1258  058F  3080               	movlw	128
  1259  0590  00F6               	movwf	Lcd_Write_String@a+1
  1260  0591  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1261  0596                     l1712:
  1262                           
  1263                           ;main.c: 141:                 _delay((unsigned long)((500)*(4000000/4000.0)));
  1264  0596  3003               	movlw	3
  1265  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1266  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1267  0599  00AF               	movwf	??_main+2
  1268  059A  308A               	movlw	138
  1269  059B  00AE               	movwf	??_main+1
  1270  059C  3055               	movlw	85
  1271  059D  00AD               	movwf	??_main
  1272  059E                     u1277:
  1273  059E  0BAD               	decfsz	??_main,f
  1274  059F  2D9E               	goto	u1277
  1275  05A0  0BAE               	decfsz	??_main+1,f
  1276  05A1  2D9E               	goto	u1277
  1277  05A2  0BAF               	decfsz	??_main+2,f
  1278  05A3  2D9E               	goto	u1277
  1279  05A4                     l1714:
  1280                           
  1281                           ;main.c: 142:                 Estado++;
  1282  05A4  3001               	movlw	1
  1283  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1284  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  1285  05A7  07CB               	addwf	_Estado,f
  1286  05A8  1803               	skipnc
  1287  05A9  0ACC               	incf	_Estado+1,f
  1288  05AA  3000               	movlw	0
  1289  05AB  07CC               	addwf	_Estado+1,f
  1290  05AC                     l1716:
  1291                           
  1292                           ;main.c: 144:                 sprintf(buffer1,"Clave: %i",clave);
  1293  05AC  3046               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1294  05AD  00AD               	movwf	??_main
  1295  05AE  082D               	movf	??_main,w
  1296  05AF  00A0               	movwf	sprintf@f
  1297  05B0  084E               	movf	_clave+1,w
  1298  05B1  00A2               	movwf	?_sprintf+2
  1299  05B2  084D               	movf	_clave,w
  1300  05B3  00A1               	movwf	?_sprintf+1
  1301  05B4  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1302  05B5  120A  118A  2398  120A  118A  	fcall	_sprintf
  1303                           
  1304                           ;main.c: 145:             }
  1305  05BA  2ECA               	goto	l1754
  1306  05BB                     l1718:
  1307  05BB  3002               	movlw	2
  1308  05BC  064B               	xorwf	_Estado,w
  1309  05BD  044C               	iorwf	_Estado+1,w
  1310  05BE  1D03               	btfss	3,2
  1311  05BF  2DC1               	goto	u1171
  1312  05C0  2DC2               	goto	u1170
  1313  05C1                     u1171:
  1314  05C1  2E37               	goto	l1736
  1315  05C2                     u1170:
  1316  05C2                     l1720:
  1317                           
  1318                           ;main.c: 147:                 pulsar_boton();
  1319  05C2  120A  158A  2778  120A  118A  	fcall	_pulsar_boton
  1320  05C7                     l1722:
  1321                           
  1322                           ;main.c: 148:                 y3=tecla;
  1323  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  1324  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  1325  05C9  0848               	movf	main@tecla+1,w
  1326  05CA  00D2               	movwf	_y3+1
  1327  05CB  0847               	movf	main@tecla,w
  1328  05CC  00D1               	movwf	_y3
  1329  05CD                     l1724:
  1330                           
  1331                           ;main.c: 149:                 clave=y1*100+y2*10+tecla;
  1332  05CD  085A               	movf	_y1+1,w
  1333  05CE  00F1               	movwf	___wmul@multiplier+1
  1334  05CF  0859               	movf	_y1,w
  1335  05D0  00F0               	movwf	___wmul@multiplier
  1336  05D1  3064               	movlw	100
  1337  05D2  00F2               	movwf	___wmul@multiplicand
  1338  05D3  3000               	movlw	0
  1339  05D4  00F3               	movwf	___wmul@multiplicand+1
  1340  05D5  120A  158A  27AB  120A  118A  	fcall	___wmul
  1341  05DA  0870               	movf	?___wmul,w
  1342  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  1343  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  1344  05DD  00AD               	movwf	??_main
  1345  05DE  0871               	movf	?___wmul+1,w
  1346  05DF  00AE               	movwf	??_main+1
  1347  05E0  0854               	movf	_y2+1,w
  1348  05E1  00F1               	movwf	___wmul@multiplier+1
  1349  05E2  0853               	movf	_y2,w
  1350  05E3  00F0               	movwf	___wmul@multiplier
  1351  05E4  300A               	movlw	10
  1352  05E5  00F2               	movwf	___wmul@multiplicand
  1353  05E6  3000               	movlw	0
  1354  05E7  00F3               	movwf	___wmul@multiplicand+1
  1355  05E8  120A  158A  27AB  120A  118A  	fcall	___wmul
  1356  05ED  0870               	movf	?___wmul,w
  1357  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1358  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1359  05F0  072D               	addwf	??_main,w
  1360  05F1  00AF               	movwf	??_main+2
  1361  05F2  0871               	movf	?___wmul+1,w
  1362  05F3  1803               	skipnc
  1363  05F4  0A71               	incf	?___wmul+1,w
  1364  05F5  072E               	addwf	??_main+1,w
  1365  05F6  00B0               	movwf	??_main+3
  1366  05F7  0847               	movf	main@tecla,w
  1367  05F8  072F               	addwf	??_main+2,w
  1368  05F9  00CD               	movwf	_clave
  1369  05FA  0848               	movf	main@tecla+1,w
  1370  05FB  1803               	skipnc
  1371  05FC  0A48               	incf	main@tecla+1,w
  1372  05FD  0730               	addwf	??_main+3,w
  1373  05FE  00CE               	movwf	_clave+1
  1374  05FF                     l1726:
  1375                           
  1376                           ;main.c: 151:                 Lcd_Set_Cursor(2,10);
  1377  05FF  300A               	movlw	10
  1378  0600  00AD               	movwf	??_main
  1379  0601  082D               	movf	??_main,w
  1380  0602  00F4               	movwf	Lcd_Set_Cursor@b
  1381  0603  3002               	movlw	2
  1382  0604  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1383  0609                     l1728:
  1384                           
  1385                           ;main.c: 152:                 Lcd_Write_String("*");
  1386  0609  3062               	movlw	(low (((STR_3+3)-__stringbase)| (0+32768)))& (0+255)
  1387  060A  00F5               	movwf	Lcd_Write_String@a
  1388  060B  3080               	movlw	128
  1389  060C  00F6               	movwf	Lcd_Write_String@a+1
  1390  060D  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1391  0612                     l1730:
  1392                           
  1393                           ;main.c: 153:                 _delay((unsigned long)((500)*(4000000/4000.0)));
  1394  0612  3003               	movlw	3
  1395  0613  1283               	bcf	3,5	;RP0=0, select bank0
  1396  0614  1303               	bcf	3,6	;RP1=0, select bank0
  1397  0615  00AF               	movwf	??_main+2
  1398  0616  308A               	movlw	138
  1399  0617  00AE               	movwf	??_main+1
  1400  0618  3055               	movlw	85
  1401  0619  00AD               	movwf	??_main
  1402  061A                     u1287:
  1403  061A  0BAD               	decfsz	??_main,f
  1404  061B  2E1A               	goto	u1287
  1405  061C  0BAE               	decfsz	??_main+1,f
  1406  061D  2E1A               	goto	u1287
  1407  061E  0BAF               	decfsz	??_main+2,f
  1408  061F  2E1A               	goto	u1287
  1409  0620                     l1732:
  1410                           
  1411                           ;main.c: 154:                 Estado++;
  1412  0620  3001               	movlw	1
  1413  0621  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0622  1303               	bcf	3,6	;RP1=0, select bank0
  1415  0623  07CB               	addwf	_Estado,f
  1416  0624  1803               	skipnc
  1417  0625  0ACC               	incf	_Estado+1,f
  1418  0626  3000               	movlw	0
  1419  0627  07CC               	addwf	_Estado+1,f
  1420  0628                     l1734:
  1421                           
  1422                           ;main.c: 156:                 sprintf(buffer1,"Clave: %i",clave);
  1423  0628  3046               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1424  0629  00AD               	movwf	??_main
  1425  062A  082D               	movf	??_main,w
  1426  062B  00A0               	movwf	sprintf@f
  1427  062C  084E               	movf	_clave+1,w
  1428  062D  00A2               	movwf	?_sprintf+2
  1429  062E  084D               	movf	_clave,w
  1430  062F  00A1               	movwf	?_sprintf+1
  1431  0630  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1432  0631  120A  118A  2398  120A  118A  	fcall	_sprintf
  1433                           
  1434                           ;main.c: 157:             }
  1435  0636  2ECA               	goto	l1754
  1436  0637                     l1736:
  1437  0637  3003               	movlw	3
  1438  0638  064B               	xorwf	_Estado,w
  1439  0639  044C               	iorwf	_Estado+1,w
  1440  063A  1D03               	btfss	3,2
  1441  063B  2E3D               	goto	u1181
  1442  063C  2E3E               	goto	u1180
  1443  063D                     u1181:
  1444  063D  2ECA               	goto	l148
  1445  063E                     u1180:
  1446  063E                     l1738:
  1447                           
  1448                           ;main.c: 159:                 pulsar_boton();
  1449  063E  120A  158A  2778  120A  118A  	fcall	_pulsar_boton
  1450  0643                     l1740:
  1451                           
  1452                           ;main.c: 160:                 y4=tecla;
  1453  0643  1283               	bcf	3,5	;RP0=0, select bank0
  1454  0644  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0645  0848               	movf	main@tecla+1,w
  1456  0646  00D0               	movwf	_y4+1
  1457  0647  0847               	movf	main@tecla,w
  1458  0648  00CF               	movwf	_y4
  1459  0649                     l1742:
  1460                           
  1461                           ;main.c: 161:                 clave=y1*1000+y2*100+y3*10+y4;
  1462  0649  085A               	movf	_y1+1,w
  1463  064A  00F1               	movwf	___wmul@multiplier+1
  1464  064B  0859               	movf	_y1,w
  1465  064C  00F0               	movwf	___wmul@multiplier
  1466  064D  30E8               	movlw	232
  1467  064E  00F2               	movwf	___wmul@multiplicand
  1468  064F  3003               	movlw	3
  1469  0650  00F3               	movwf	___wmul@multiplicand+1
  1470  0651  120A  158A  27AB  120A  118A  	fcall	___wmul
  1471  0656  0870               	movf	?___wmul,w
  1472  0657  1283               	bcf	3,5	;RP0=0, select bank0
  1473  0658  1303               	bcf	3,6	;RP1=0, select bank0
  1474  0659  00AD               	movwf	??_main
  1475  065A  0871               	movf	?___wmul+1,w
  1476  065B  00AE               	movwf	??_main+1
  1477  065C  0854               	movf	_y2+1,w
  1478  065D  00F1               	movwf	___wmul@multiplier+1
  1479  065E  0853               	movf	_y2,w
  1480  065F  00F0               	movwf	___wmul@multiplier
  1481  0660  3064               	movlw	100
  1482  0661  00F2               	movwf	___wmul@multiplicand
  1483  0662  3000               	movlw	0
  1484  0663  00F3               	movwf	___wmul@multiplicand+1
  1485  0664  120A  158A  27AB  120A  118A  	fcall	___wmul
  1486  0669  0870               	movf	?___wmul,w
  1487  066A  1283               	bcf	3,5	;RP0=0, select bank0
  1488  066B  1303               	bcf	3,6	;RP1=0, select bank0
  1489  066C  072D               	addwf	??_main,w
  1490  066D  00AF               	movwf	??_main+2
  1491  066E  0871               	movf	?___wmul+1,w
  1492  066F  1803               	skipnc
  1493  0670  0A71               	incf	?___wmul+1,w
  1494  0671  072E               	addwf	??_main+1,w
  1495  0672  00B0               	movwf	??_main+3
  1496  0673  0852               	movf	_y3+1,w
  1497  0674  00F1               	movwf	___wmul@multiplier+1
  1498  0675  0851               	movf	_y3,w
  1499  0676  00F0               	movwf	___wmul@multiplier
  1500  0677  300A               	movlw	10
  1501  0678  00F2               	movwf	___wmul@multiplicand
  1502  0679  3000               	movlw	0
  1503  067A  00F3               	movwf	___wmul@multiplicand+1
  1504  067B  120A  158A  27AB  120A  118A  	fcall	___wmul
  1505  0680  0870               	movf	?___wmul,w
  1506  0681  1283               	bcf	3,5	;RP0=0, select bank0
  1507  0682  1303               	bcf	3,6	;RP1=0, select bank0
  1508  0683  072F               	addwf	??_main+2,w
  1509  0684  00B1               	movwf	??_main+4
  1510  0685  0871               	movf	?___wmul+1,w
  1511  0686  1803               	skipnc
  1512  0687  0A71               	incf	?___wmul+1,w
  1513  0688  0730               	addwf	??_main+3,w
  1514  0689  00B2               	movwf	??_main+5
  1515  068A  084F               	movf	_y4,w
  1516  068B  0731               	addwf	??_main+4,w
  1517  068C  00CD               	movwf	_clave
  1518  068D  0850               	movf	_y4+1,w
  1519  068E  1803               	skipnc
  1520  068F  0A50               	incf	_y4+1,w
  1521  0690  0732               	addwf	??_main+5,w
  1522  0691  00CE               	movwf	_clave+1
  1523  0692                     l1744:
  1524                           
  1525                           ;main.c: 163:                 Lcd_Set_Cursor(2,11);
  1526  0692  300B               	movlw	11
  1527  0693  00AD               	movwf	??_main
  1528  0694  082D               	movf	??_main,w
  1529  0695  00F4               	movwf	Lcd_Set_Cursor@b
  1530  0696  3002               	movlw	2
  1531  0697  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1532  069C                     l1746:
  1533                           
  1534                           ;main.c: 164:                 Lcd_Write_String("*");
  1535  069C  3062               	movlw	(low (((STR_3+3)-__stringbase)| (0+32768)))& (0+255)
  1536  069D  00F5               	movwf	Lcd_Write_String@a
  1537  069E  3080               	movlw	128
  1538  069F  00F6               	movwf	Lcd_Write_String@a+1
  1539  06A0  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1540  06A5                     l1748:
  1541                           
  1542                           ;main.c: 165:                 _delay((unsigned long)((500)*(4000000/4000.0)));
  1543  06A5  3003               	movlw	3
  1544  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1545  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1546  06A8  00AF               	movwf	??_main+2
  1547  06A9  308A               	movlw	138
  1548  06AA  00AE               	movwf	??_main+1
  1549  06AB  3055               	movlw	85
  1550  06AC  00AD               	movwf	??_main
  1551  06AD                     u1297:
  1552  06AD  0BAD               	decfsz	??_main,f
  1553  06AE  2EAD               	goto	u1297
  1554  06AF  0BAE               	decfsz	??_main+1,f
  1555  06B0  2EAD               	goto	u1297
  1556  06B1  0BAF               	decfsz	??_main+2,f
  1557  06B2  2EAD               	goto	u1297
  1558  06B3                     l1750:
  1559                           
  1560                           ;main.c: 166:                 Estado++;
  1561  06B3  3001               	movlw	1
  1562  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  1563  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  1564  06B6  07CB               	addwf	_Estado,f
  1565  06B7  1803               	skipnc
  1566  06B8  0ACC               	incf	_Estado+1,f
  1567  06B9  3000               	movlw	0
  1568  06BA  07CC               	addwf	_Estado+1,f
  1569  06BB                     l1752:
  1570                           
  1571                           ;main.c: 168:                 sprintf(buffer1,"Clave: %i",clave);
  1572  06BB  3046               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1573  06BC  00AD               	movwf	??_main
  1574  06BD  082D               	movf	??_main,w
  1575  06BE  00A0               	movwf	sprintf@f
  1576  06BF  084E               	movf	_clave+1,w
  1577  06C0  00A2               	movwf	?_sprintf+2
  1578  06C1  084D               	movf	_clave,w
  1579  06C2  00A1               	movwf	?_sprintf+1
  1580  06C3  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1581  06C4  120A  118A  2398  120A  118A  	fcall	_sprintf
  1582  06C9  2ECA               	goto	l1754
  1583  06CA                     l148:
  1584  06CA                     l1754:
  1585                           
  1586                           ;main.c: 171:         if(tecla==35){
  1587  06CA  3023               	movlw	35
  1588  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  1589  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  1590  06CD  0647               	xorwf	main@tecla,w
  1591  06CE  0448               	iorwf	main@tecla+1,w
  1592  06CF  1D03               	btfss	3,2
  1593  06D0  2ED2               	goto	u1191
  1594  06D1  2ED3               	goto	u1190
  1595  06D2                     u1191:
  1596  06D2  2EDE               	goto	l1760
  1597  06D3                     u1190:
  1598  06D3                     l1756:
  1599                           
  1600                           ;main.c: 172:             pulsar_boton();
  1601  06D3  120A  158A  2778  120A  118A  	fcall	_pulsar_boton
  1602  06D8                     l1758:
  1603                           
  1604                           ;main.c: 173:             ver_clave(buffer1);
  1605  06D8  3033               	movlw	(low main@buffer1)& (0+255)
  1606  06D9  120A  118A  2115  120A  118A  	fcall	_ver_clave
  1607  06DE                     l1760:
  1608                           
  1609                           ;main.c: 175:         if(tecla==42){
  1610  06DE  302A               	movlw	42
  1611  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  1612  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  1613  06E1  0647               	xorwf	main@tecla,w
  1614  06E2  0448               	iorwf	main@tecla+1,w
  1615  06E3  1D03               	btfss	3,2
  1616  06E4  2EE6               	goto	u1201
  1617  06E5  2EE7               	goto	u1200
  1618  06E6                     u1201:
  1619  06E6  2FCD               	goto	l1804
  1620  06E7                     u1200:
  1621  06E7                     l1762:
  1622                           
  1623                           ;main.c: 177:             pulsar_boton();
  1624  06E7  120A  158A  2778  120A  118A  	fcall	_pulsar_boton
  1625  06EC                     l1764:
  1626                           
  1627                           ;main.c: 179:             if(clave==password){
  1628  06EC  30A9               	movlw	169
  1629  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  1630  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  1631  06EF  064D               	xorwf	_clave,w
  1632  06F0  301C               	movlw	28
  1633  06F1  1903               	skipnz
  1634  06F2  064E               	xorwf	_clave+1,w
  1635  06F3  1D03               	btfss	3,2
  1636  06F4  2EF6               	goto	u1211
  1637  06F5  2EF7               	goto	u1210
  1638  06F6                     u1211:
  1639  06F6  2F44               	goto	l1778
  1640  06F7                     u1210:
  1641  06F7                     l1766:
  1642                           
  1643                           ;main.c: 181:                 verifi=1;
  1644  06F7  3001               	movlw	1
  1645  06F8  00D5               	movwf	_verifi
  1646  06F9  3000               	movlw	0
  1647  06FA  00D6               	movwf	_verifi+1
  1648  06FB                     l1768:
  1649                           
  1650                           ;main.c: 183:                 apagar_led_rojo();
  1651  06FB  120A  158A  273D  120A  118A  	fcall	_apagar_led_rojo
  1652                           
  1653                           ;main.c: 184:                 Lcd_Clear();
  1654  0700  120A  158A  2751  120A  118A  	fcall	_Lcd_Clear
  1655                           
  1656                           ;main.c: 185:                 Lcd_Set_Cursor(1,6);
  1657  0705  3006               	movlw	6
  1658  0706  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0707  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0708  00AD               	movwf	??_main
  1661  0709  082D               	movf	??_main,w
  1662  070A  00F4               	movwf	Lcd_Set_Cursor@b
  1663  070B  3001               	movlw	1
  1664  070C  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1665  0711                     l1770:
  1666                           
  1667                           ;main.c: 186:                 Lcd_Write_String("Clave");
  1668  0711  3059               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1669  0712  00F5               	movwf	Lcd_Write_String@a
  1670  0713  3080               	movlw	128
  1671  0714  00F6               	movwf	Lcd_Write_String@a+1
  1672  0715  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1673  071A                     l1772:
  1674                           
  1675                           ;main.c: 187:                 Lcd_Set_Cursor(2,5);
  1676  071A  3005               	movlw	5
  1677  071B  1283               	bcf	3,5	;RP0=0, select bank0
  1678  071C  1303               	bcf	3,6	;RP1=0, select bank0
  1679  071D  00AD               	movwf	??_main
  1680  071E  082D               	movf	??_main,w
  1681  071F  00F4               	movwf	Lcd_Set_Cursor@b
  1682  0720  3002               	movlw	2
  1683  0721  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1684                           
  1685                           ;main.c: 188:                 Lcd_Write_String("Correcta");
  1686  0726  3050               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1687  0727  00F5               	movwf	Lcd_Write_String@a
  1688  0728  3080               	movlw	128
  1689  0729  00F6               	movwf	Lcd_Write_String@a+1
  1690  072A  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1691  072F                     l1774:
  1692                           
  1693                           ;main.c: 189:                 prender_led_verde();
  1694  072F  120A  158A  2745  120A  118A  	fcall	_prender_led_verde
  1695  0734                     l1776:
  1696                           
  1697                           ;main.c: 190:                 _delay((unsigned long)((7000)*(4000000/4000.0)));
  1698  0734  3024               	movlw	36
  1699  0735  1283               	bcf	3,5	;RP0=0, select bank0
  1700  0736  1303               	bcf	3,6	;RP1=0, select bank0
  1701  0737  00AF               	movwf	??_main+2
  1702  0738  3083               	movlw	131
  1703  0739  00AE               	movwf	??_main+1
  1704  073A  30CE               	movlw	206
  1705  073B  00AD               	movwf	??_main
  1706  073C                     u1307:
  1707  073C  0BAD               	decfsz	??_main,f
  1708  073D  2F3C               	goto	u1307
  1709  073E  0BAE               	decfsz	??_main+1,f
  1710  073F  2F3C               	goto	u1307
  1711  0740  0BAF               	decfsz	??_main+2,f
  1712  0741  2F3C               	goto	u1307
  1713  0742  0000               	nop
  1714                           
  1715                           ;main.c: 191:             }
  1716  0743  2FCD               	goto	l1804
  1717  0744                     l1778:
  1718                           
  1719                           ;main.c: 193:                 intentos++;
  1720  0744  3001               	movlw	1
  1721  0745  07D7               	addwf	_intentos,f
  1722  0746  1803               	skipnc
  1723  0747  0AD8               	incf	_intentos+1,f
  1724  0748  3000               	movlw	0
  1725  0749  07D8               	addwf	_intentos+1,f
  1726  074A                     l1780:
  1727                           
  1728                           ;main.c: 194:                 Estado=0;
  1729  074A  01CB               	clrf	_Estado
  1730  074B  01CC               	clrf	_Estado+1
  1731  074C                     l1782:
  1732                           
  1733                           ;main.c: 195:                 Lcd_Clear();
  1734  074C  120A  158A  2751  120A  118A  	fcall	_Lcd_Clear
  1735  0751                     l1784:
  1736                           
  1737                           ;main.c: 196:                 Lcd_Set_Cursor(1,6);
  1738  0751  3006               	movlw	6
  1739  0752  1283               	bcf	3,5	;RP0=0, select bank0
  1740  0753  1303               	bcf	3,6	;RP1=0, select bank0
  1741  0754  00AD               	movwf	??_main
  1742  0755  082D               	movf	??_main,w
  1743  0756  00F4               	movwf	Lcd_Set_Cursor@b
  1744  0757  3001               	movlw	1
  1745  0758  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1746  075D                     l1786:
  1747                           
  1748                           ;main.c: 197:                 Lcd_Write_String("Clave");
  1749  075D  3059               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1750  075E  00F5               	movwf	Lcd_Write_String@a
  1751  075F  3080               	movlw	128
  1752  0760  00F6               	movwf	Lcd_Write_String@a+1
  1753  0761  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1754  0766                     l1788:
  1755                           
  1756                           ;main.c: 198:                 Lcd_Set_Cursor(2,4);
  1757  0766  3004               	movlw	4
  1758  0767  1283               	bcf	3,5	;RP0=0, select bank0
  1759  0768  1303               	bcf	3,6	;RP1=0, select bank0
  1760  0769  00AD               	movwf	??_main
  1761  076A  082D               	movf	??_main,w
  1762  076B  00F4               	movwf	Lcd_Set_Cursor@b
  1763  076C  3002               	movlw	2
  1764  076D  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1765  0772                     l1790:
  1766                           
  1767                           ;main.c: 199:                 Lcd_Write_String("Incorrecta");
  1768  0772  3031               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1769  0773  00F5               	movwf	Lcd_Write_String@a
  1770  0774  3080               	movlw	128
  1771  0775  00F6               	movwf	Lcd_Write_String@a+1
  1772  0776  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1773  077B                     l1792:
  1774                           
  1775                           ;main.c: 200:                 _delay((unsigned long)((1000)*(4000000/4000.0)));
  1776  077B  3006               	movlw	6
  1777  077C  1283               	bcf	3,5	;RP0=0, select bank0
  1778  077D  1303               	bcf	3,6	;RP1=0, select bank0
  1779  077E  00AF               	movwf	??_main+2
  1780  077F  3013               	movlw	19
  1781  0780  00AE               	movwf	??_main+1
  1782  0781  30AD               	movlw	173
  1783  0782  00AD               	movwf	??_main
  1784  0783                     u1317:
  1785  0783  0BAD               	decfsz	??_main,f
  1786  0784  2F83               	goto	u1317
  1787  0785  0BAE               	decfsz	??_main+1,f
  1788  0786  2F83               	goto	u1317
  1789  0787  0BAF               	decfsz	??_main+2,f
  1790  0788  2F83               	goto	u1317
  1791  0789                     l1794:
  1792                           
  1793                           ;main.c: 202:                 if(intentos<3){
  1794  0789  1283               	bcf	3,5	;RP0=0, select bank0
  1795  078A  1303               	bcf	3,6	;RP1=0, select bank0
  1796  078B  0858               	movf	_intentos+1,w
  1797  078C  3A80               	xorlw	128
  1798  078D  00FF               	movwf	btemp+1
  1799  078E  3080               	movlw	128
  1800  078F  027F               	subwf	btemp+1,w
  1801  0790  1D03               	skipz
  1802  0791  2F94               	goto	u1225
  1803  0792  3003               	movlw	3
  1804  0793  0257               	subwf	_intentos,w
  1805  0794                     u1225:
  1806  0794  1803               	skipnc
  1807  0795  2F97               	goto	u1221
  1808  0796  2F98               	goto	u1220
  1809  0797                     u1221:
  1810  0797  2FC8               	goto	l1802
  1811  0798                     u1220:
  1812  0798                     l1796:
  1813                           
  1814                           ;main.c: 204:                     Lcd_Clear();
  1815  0798  120A  158A  2751  120A  118A  	fcall	_Lcd_Clear
  1816                           
  1817                           ;main.c: 205:                     Lcd_Set_Cursor(1,2);
  1818  079D  3002               	movlw	2
  1819  079E  1283               	bcf	3,5	;RP0=0, select bank0
  1820  079F  1303               	bcf	3,6	;RP1=0, select bank0
  1821  07A0  00AD               	movwf	??_main
  1822  07A1  082D               	movf	??_main,w
  1823  07A2  00F4               	movwf	Lcd_Set_Cursor@b
  1824  07A3  3001               	movlw	1
  1825  07A4  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1826  07A9                     l1798:
  1827                           
  1828                           ;main.c: 206:                     Lcd_Write_String("Ingrese Clave:");
  1829  07A9  3022               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1830  07AA  00F5               	movwf	Lcd_Write_String@a
  1831  07AB  3080               	movlw	128
  1832  07AC  00F6               	movwf	Lcd_Write_String@a+1
  1833  07AD  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1834  07B2                     l1800:
  1835                           
  1836                           ;main.c: 207:                     Lcd_Set_Cursor(2,8);
  1837  07B2  3008               	movlw	8
  1838  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  1839  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  1840  07B5  00AD               	movwf	??_main
  1841  07B6  082D               	movf	??_main,w
  1842  07B7  00F4               	movwf	Lcd_Set_Cursor@b
  1843  07B8  3002               	movlw	2
  1844  07B9  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1845                           
  1846                           ;main.c: 208:                     Lcd_Write_String("____");
  1847  07BE  3064               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1848  07BF  00F5               	movwf	Lcd_Write_String@a
  1849  07C0  3080               	movlw	128
  1850  07C1  00F6               	movwf	Lcd_Write_String@a+1
  1851  07C2  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1852                           
  1853                           ;main.c: 209:                 }
  1854  07C7  2FCD               	goto	l1804
  1855  07C8                     l1802:
  1856                           
  1857                           ;main.c: 211:                     Alarma();
  1858  07C8  120A  118A  2291  120A  118A  	fcall	_Alarma
  1859  07CD                     l1804:
  1860                           
  1861                           ;main.c: 114:   while(intentos<3 && verifi==0){
  1862  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1863  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1864  07CF  0858               	movf	_intentos+1,w
  1865  07D0  3A80               	xorlw	128
  1866  07D1  00FF               	movwf	btemp+1
  1867  07D2  3080               	movlw	128
  1868  07D3  027F               	subwf	btemp+1,w
  1869  07D4  1D03               	skipz
  1870  07D5  2FD8               	goto	u1235
  1871  07D6  3003               	movlw	3
  1872  07D7  0257               	subwf	_intentos,w
  1873  07D8                     u1235:
  1874  07D8  1803               	skipnc
  1875  07D9  2FDB               	goto	u1231
  1876  07DA  2FDC               	goto	u1230
  1877  07DB                     u1231:
  1878  07DB  2FE4               	goto	l163
  1879  07DC                     u1230:
  1880  07DC                     l1806:
  1881  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1882  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1883  07DE  0855               	movf	_verifi,w
  1884  07DF  0456               	iorwf	_verifi+1,w
  1885  07E0  1903               	btfsc	3,2
  1886  07E1  2FE3               	goto	u1241
  1887  07E2  2FE4               	goto	u1240
  1888  07E3                     u1241:
  1889  07E3  2CE0               	goto	l1674
  1890  07E4                     u1240:
  1891  07E4                     l163:
  1892  07E4  120A  118A  2800   	ljmp	start
  1893  07E7                     __end_of_main:
  1894                           
  1895                           	psect	text1
  1896  0115                     __ptext1:	
  1897 ;; *************** function _ver_clave *****************
  1898 ;; Defined at:
  1899 ;;		line 58 in file "main.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  buffer1         1    wreg     unsigned char 
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  buffer1         1    0[BANK0 ] unsigned char 
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1913 ;;      Params:         0       0       0       0       0
  1914 ;;      Locals:         0       1       0       0       0
  1915 ;;      Temps:          3       0       0       0       0
  1916 ;;      Totals:         3       1       0       0       0
  1917 ;;Total ram usage:        4 bytes
  1918 ;; Hardware stack levels used: 1
  1919 ;; Hardware stack levels required when called: 3
  1920 ;; This function calls:
  1921 ;;		_Lcd_Set_Cursor
  1922 ;;		_Lcd_Write_String
  1923 ;; This function is called by:
  1924 ;;		_main
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928  0115                     _ver_clave:	
  1929                           ;psect for function _ver_clave
  1930                           
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in _ver_clave: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1934                           ;ver_clave@buffer1 stored from wreg
  1935  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1936  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1937  0117  00A0               	movwf	ver_clave@buffer1
  1938  0118                     l1492:
  1939                           
  1940                           ;main.c: 60:     Lcd_Set_Cursor(2,1);
  1941  0118  01F4               	clrf	Lcd_Set_Cursor@b
  1942  0119  0AF4               	incf	Lcd_Set_Cursor@b,f
  1943  011A  3002               	movlw	2
  1944  011B  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1945  0120                     l1494:
  1946                           
  1947                           ;main.c: 61:     Lcd_Write_String(buffer1);
  1948  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1949  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1950  0122  0820               	movf	ver_clave@buffer1,w
  1951  0123  00FB               	movwf	??_ver_clave
  1952  0124  01FC               	clrf	??_ver_clave+1
  1953  0125  087B               	movf	??_ver_clave,w
  1954  0126  00F5               	movwf	Lcd_Write_String@a
  1955  0127  087C               	movf	??_ver_clave+1,w
  1956  0128  00F6               	movwf	Lcd_Write_String@a+1
  1957  0129  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1958  012E                     l1496:
  1959                           
  1960                           ;main.c: 62:     _delay((unsigned long)((1000)*(4000000/4000.0)));
  1961  012E  3006               	movlw	6
  1962  012F  00FD               	movwf	??_ver_clave+2
  1963  0130  3013               	movlw	19
  1964  0131  00FC               	movwf	??_ver_clave+1
  1965  0132  30AD               	movlw	173
  1966  0133  00FB               	movwf	??_ver_clave
  1967  0134                     u1327:
  1968  0134  0BFB               	decfsz	??_ver_clave,f
  1969  0135  2934               	goto	u1327
  1970  0136  0BFC               	decfsz	??_ver_clave+1,f
  1971  0137  2934               	goto	u1327
  1972  0138  0BFD               	decfsz	??_ver_clave+2,f
  1973  0139  2934               	goto	u1327
  1974  013A  293B               	nop2
  1975  013B                     l1498:
  1976                           
  1977                           ;main.c: 63:     Lcd_Set_Cursor(2,8);
  1978  013B  3008               	movlw	8
  1979  013C  00FB               	movwf	??_ver_clave
  1980  013D  087B               	movf	??_ver_clave,w
  1981  013E  00F4               	movwf	Lcd_Set_Cursor@b
  1982  013F  3002               	movlw	2
  1983  0140  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1984  0145                     l1500:
  1985                           
  1986                           ;main.c: 64:     Lcd_Write_String("****");
  1987  0145  305F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1988  0146  00F5               	movwf	Lcd_Write_String@a
  1989  0147  3080               	movlw	128
  1990  0148  00F6               	movwf	Lcd_Write_String@a+1
  1991  0149  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  1992  014E                     l132:
  1993  014E  0008               	return
  1994  014F                     __end_of_ver_clave:
  1995                           
  1996                           	psect	text2
  1997  0398                     __ptext2:	
  1998 ;; *************** function _sprintf *****************
  1999 ;; Defined at:
  2000 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  sp              1    wreg     PTR unsigned char 
  2003 ;;		 -> main@buffer1(20), 
  2004 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2005 ;;		 -> STR_14(10), STR_12(10), STR_10(10), STR_8(10), 
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  2008 ;;		 -> main@buffer1(20), 
  2009 ;;  tmpval          4    0        struct .
  2010 ;;  val             2    9[BANK0 ] unsigned int 
  2011 ;;  cp              2    0        PTR const unsigned char 
  2012 ;;  len             2    0        unsigned int 
  2013 ;;  c               1   12[BANK0 ] unsigned char 
  2014 ;;  prec            1    8[BANK0 ] char 
  2015 ;;  flag            1    7[BANK0 ] unsigned char 
  2016 ;;  ap              1    6[BANK0 ] PTR void [1]
  2017 ;;		 -> ?_sprintf(2), 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  2    0[BANK0 ] int 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2027 ;;      Params:         0       3       0       0       0
  2028 ;;      Locals:         0       7       0       0       0
  2029 ;;      Temps:          0       3       0       0       0
  2030 ;;      Totals:         0      13       0       0       0
  2031 ;;Total ram usage:       13 bytes
  2032 ;; Hardware stack levels used: 1
  2033 ;; Hardware stack levels required when called: 1
  2034 ;; This function calls:
  2035 ;;		___lwdiv
  2036 ;;		___lwmod
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042  0398                     _sprintf:	
  2043                           ;psect for function _sprintf
  2044                           
  2045                           
  2046                           ;incstack = 0
  2047                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2048                           ;sprintf@sp stored from wreg
  2049  0398  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0399  1303               	bcf	3,6	;RP1=0, select bank0
  2051  039A  00AB               	movwf	sprintf@sp
  2052  039B                     l1566:
  2053                           
  2054                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2055  039B  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2056  039C  00A3               	movwf	??_sprintf
  2057  039D  0823               	movf	??_sprintf,w
  2058  039E  00A6               	movwf	sprintf@ap
  2059                           
  2060                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2061  039F  2C69               	goto	l1618
  2062  03A0                     l1568:
  2063                           
  2064                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2065  03A0  3025               	movlw	37
  2066  03A1  062C               	xorwf	sprintf@c,w
  2067  03A2  1903               	btfsc	3,2
  2068  03A3  2BA5               	goto	u1011
  2069  03A4  2BA6               	goto	u1010
  2070  03A5                     u1011:
  2071  03A5  2BB2               	goto	l1574
  2072  03A6                     u1010:
  2073  03A6                     l1570:
  2074                           
  2075                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2076  03A6  082C               	movf	sprintf@c,w
  2077  03A7  00A3               	movwf	??_sprintf
  2078  03A8  082B               	movf	sprintf@sp,w
  2079  03A9  0084               	movwf	4
  2080  03AA  0823               	movf	??_sprintf,w
  2081  03AB  1383               	bcf	3,7	;select IRP bank0
  2082  03AC  0080               	movwf	0
  2083  03AD                     l1572:
  2084  03AD  3001               	movlw	1
  2085  03AE  00A3               	movwf	??_sprintf
  2086  03AF  0823               	movf	??_sprintf,w
  2087  03B0  07AB               	addwf	sprintf@sp,f
  2088                           
  2089                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 559:    continue;
  2090  03B1  2C69               	goto	l1618
  2091  03B2                     l1574:
  2092                           
  2093                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2094  03B2  01A7               	clrf	sprintf@flag
  2095  03B3                     l1578:	
  2096                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2097                           
  2098  03B3  3001               	movlw	1
  2099  03B4  07A0               	addwf	sprintf@f,f
  2100  03B5  30FF               	movlw	-1
  2101  03B6  0720               	addwf	sprintf@f,w
  2102  03B7  0084               	movwf	4
  2103  03B8  120A  118A  200D  120A  118A  	fcall	stringdir
  2104  03BD  00AC               	movwf	sprintf@c
  2105  03BE  00A3               	movwf	??_sprintf
  2106  03BF  01A4               	clrf	??_sprintf+1
  2107                           
  2108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2109                           ; Switch size 1, requested type "simple"
  2110                           ; Number of cases is 1, Range of values is 0 to 0
  2111                           ; switch strategies available:
  2112                           ; Name         Instructions Cycles
  2113                           ; simple_byte            4     3 (average)
  2114                           ; direct_byte           11     8 (fixed)
  2115                           ; jumptable            260     6 (fixed)
  2116                           ;	Chosen strategy is simple_byte
  2117  03C0  0824               	movf	??_sprintf+1,w
  2118  03C1  3A00               	xorlw	0	; case 0
  2119  03C2  1903               	skipnz
  2120  03C3  2BC5               	goto	l1828
  2121  03C4  2C69               	goto	l1618
  2122  03C5                     l1828:
  2123                           
  2124                           ; Switch size 1, requested type "simple"
  2125                           ; Number of cases is 3, Range of values is 0 to 105
  2126                           ; switch strategies available:
  2127                           ; Name         Instructions Cycles
  2128                           ; simple_byte           10     6 (average)
  2129                           ; jumptable            260     6 (fixed)
  2130                           ;	Chosen strategy is simple_byte
  2131  03C5  0823               	movf	??_sprintf,w
  2132  03C6  3A00               	xorlw	0	; case 0
  2133  03C7  1903               	skipnz
  2134  03C8  2C7B               	goto	l1620
  2135  03C9  3A64               	xorlw	100	; case 100
  2136  03CA  1903               	skipnz
  2137  03CB  2BD0               	goto	l1580
  2138  03CC  3A0D               	xorlw	13	; case 105
  2139  03CD  1903               	skipnz
  2140  03CE  2BD0               	goto	l1580
  2141  03CF  2C69               	goto	l1618
  2142  03D0                     l1580:
  2143                           
  2144                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2145  03D0  0826               	movf	sprintf@ap,w
  2146  03D1  0084               	movwf	4
  2147  03D2  1383               	bcf	3,7	;select IRP bank0
  2148  03D3  0800               	movf	0,w
  2149  03D4  00A9               	movwf	sprintf@val
  2150  03D5  0A84               	incf	4,f
  2151  03D6  0800               	movf	0,w
  2152  03D7  00AA               	movwf	sprintf@val+1
  2153  03D8                     l1582:
  2154  03D8  3002               	movlw	2
  2155  03D9  00A3               	movwf	??_sprintf
  2156  03DA  0823               	movf	??_sprintf,w
  2157  03DB  07A6               	addwf	sprintf@ap,f
  2158  03DC                     l1584:
  2159                           
  2160                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2161  03DC  1FAA               	btfss	sprintf@val+1,7
  2162  03DD  2BDF               	goto	u1021
  2163  03DE  2BE0               	goto	u1020
  2164  03DF                     u1021:
  2165  03DF  2BE9               	goto	l1590
  2166  03E0                     u1020:
  2167  03E0                     l1586:
  2168                           
  2169                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2170  03E0  3003               	movlw	3
  2171  03E1  00A3               	movwf	??_sprintf
  2172  03E2  0823               	movf	??_sprintf,w
  2173  03E3  04A7               	iorwf	sprintf@flag,f
  2174  03E4                     l1588:
  2175                           
  2176                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2177  03E4  09A9               	comf	sprintf@val,f
  2178  03E5  09AA               	comf	sprintf@val+1,f
  2179  03E6  0AA9               	incf	sprintf@val,f
  2180  03E7  1903               	skipnz
  2181  03E8  0AAA               	incf	sprintf@val+1,f
  2182  03E9                     l1590:
  2183                           
  2184                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2185  03E9  01AC               	clrf	sprintf@c
  2186  03EA  0AAC               	incf	sprintf@c,f
  2187  03EB                     l1596:
  2188                           
  2189                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2190  03EB  082C               	movf	sprintf@c,w
  2191  03EC  00A3               	movwf	??_sprintf
  2192  03ED  0723               	addwf	??_sprintf,w
  2193  03EE  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2194  03EF  0084               	movwf	4
  2195  03F0  120A  118A  200D  120A  118A  	fcall	stringdir
  2196  03F5  00A4               	movwf	??_sprintf+1
  2197  03F6  120A  118A  200D  120A  118A  	fcall	stringdir
  2198  03FB  00A5               	movwf	??_sprintf+2
  2199  03FC  0825               	movf	??_sprintf+2,w
  2200  03FD  022A               	subwf	sprintf@val+1,w
  2201  03FE  1D03               	skipz
  2202  03FF  2C02               	goto	u1035
  2203  0400  0824               	movf	??_sprintf+1,w
  2204  0401  0229               	subwf	sprintf@val,w
  2205  0402                     u1035:
  2206  0402  1803               	skipnc
  2207  0403  2C05               	goto	u1031
  2208  0404  2C06               	goto	u1030
  2209  0405                     u1031:
  2210  0405  2C07               	goto	l1600
  2211  0406                     u1030:
  2212  0406  2C11               	goto	l1602
  2213  0407                     l1600:
  2214  0407  3001               	movlw	1
  2215  0408  00A3               	movwf	??_sprintf
  2216  0409  0823               	movf	??_sprintf,w
  2217  040A  07AC               	addwf	sprintf@c,f
  2218  040B  3005               	movlw	5
  2219  040C  062C               	xorwf	sprintf@c,w
  2220  040D  1D03               	btfss	3,2
  2221  040E  2C10               	goto	u1041
  2222  040F  2C11               	goto	u1040
  2223  0410                     u1041:
  2224  0410  2BEB               	goto	l1596
  2225  0411                     u1040:
  2226  0411                     l1602:
  2227                           
  2228                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2229  0411  0827               	movf	sprintf@flag,w
  2230  0412  3903               	andlw	3
  2231  0413  1903               	btfsc	3,2
  2232  0414  2C16               	goto	u1051
  2233  0415  2C17               	goto	u1050
  2234  0416                     u1051:
  2235  0416  2C22               	goto	l1608
  2236  0417                     u1050:
  2237  0417                     l1604:
  2238                           
  2239                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2240  0417  302D               	movlw	45
  2241  0418  00A3               	movwf	??_sprintf
  2242  0419  082B               	movf	sprintf@sp,w
  2243  041A  0084               	movwf	4
  2244  041B  0823               	movf	??_sprintf,w
  2245  041C  1383               	bcf	3,7	;select IRP bank0
  2246  041D  0080               	movwf	0
  2247  041E                     l1606:
  2248  041E  3001               	movlw	1
  2249  041F  00A3               	movwf	??_sprintf
  2250  0420  0823               	movf	??_sprintf,w
  2251  0421  07AB               	addwf	sprintf@sp,f
  2252  0422                     l1608:
  2253                           
  2254                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2255  0422  082C               	movf	sprintf@c,w
  2256  0423  00A3               	movwf	??_sprintf
  2257  0424  0823               	movf	??_sprintf,w
  2258  0425  00A8               	movwf	sprintf@prec
  2259                           
  2260                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2261  0426  2C60               	goto	l1616
  2262  0427                     l1610:
  2263                           
  2264                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2265  0427  300A               	movlw	10
  2266  0428  00F8               	movwf	___lwmod@divisor
  2267  0429  3000               	movlw	0
  2268  042A  00F9               	movwf	___lwmod@divisor+1
  2269  042B  0828               	movf	sprintf@prec,w
  2270  042C  00A3               	movwf	??_sprintf
  2271  042D  0723               	addwf	??_sprintf,w
  2272  042E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2273  042F  0084               	movwf	4
  2274  0430  120A  118A  200D  120A  118A  	fcall	stringdir
  2275  0435  00F0               	movwf	___lwdiv@divisor
  2276  0436  120A  118A  200D  120A  118A  	fcall	stringdir
  2277  043B  00F1               	movwf	___lwdiv@divisor+1
  2278  043C  082A               	movf	sprintf@val+1,w
  2279  043D  00F3               	movwf	___lwdiv@dividend+1
  2280  043E  0829               	movf	sprintf@val,w
  2281  043F  00F2               	movwf	___lwdiv@dividend
  2282  0440  120A  118A  214F  120A  118A  	fcall	___lwdiv
  2283  0445  0871               	movf	?___lwdiv+1,w
  2284  0446  00FB               	movwf	___lwmod@dividend+1
  2285  0447  0870               	movf	?___lwdiv,w
  2286  0448  00FA               	movwf	___lwmod@dividend
  2287  0449  120A  118A  20DB  120A  118A  	fcall	___lwmod
  2288  044E  0878               	movf	?___lwmod,w
  2289  044F  3E30               	addlw	48
  2290  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0452  00A4               	movwf	??_sprintf+1
  2293  0453  0824               	movf	??_sprintf+1,w
  2294  0454  00AC               	movwf	sprintf@c
  2295  0455                     l1612:
  2296                           
  2297                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2298  0455  082C               	movf	sprintf@c,w
  2299  0456  00A3               	movwf	??_sprintf
  2300  0457  082B               	movf	sprintf@sp,w
  2301  0458  0084               	movwf	4
  2302  0459  0823               	movf	??_sprintf,w
  2303  045A  1383               	bcf	3,7	;select IRP bank0
  2304  045B  0080               	movwf	0
  2305  045C                     l1614:
  2306  045C  3001               	movlw	1
  2307  045D  00A3               	movwf	??_sprintf
  2308  045E  0823               	movf	??_sprintf,w
  2309  045F  07AB               	addwf	sprintf@sp,f
  2310  0460                     l1616:
  2311                           
  2312                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2313  0460  30FF               	movlw	255
  2314  0461  00A3               	movwf	??_sprintf
  2315  0462  0823               	movf	??_sprintf,w
  2316  0463  07A8               	addwf	sprintf@prec,f
  2317  0464  0A28               	incf	sprintf@prec,w
  2318  0465  1D03               	btfss	3,2
  2319  0466  2C68               	goto	u1061
  2320  0467  2C69               	goto	u1060
  2321  0468                     u1061:
  2322  0468  2C27               	goto	l1610
  2323  0469                     u1060:
  2324  0469                     l1618:
  2325                           
  2326                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2327  0469  3001               	movlw	1
  2328  046A  07A0               	addwf	sprintf@f,f
  2329  046B  30FF               	movlw	-1
  2330  046C  0720               	addwf	sprintf@f,w
  2331  046D  0084               	movwf	4
  2332  046E  120A  118A  200D  120A  118A  	fcall	stringdir
  2333  0473  00A3               	movwf	??_sprintf
  2334  0474  0823               	movf	??_sprintf,w
  2335  0475  00AC               	movwf	sprintf@c
  2336  0476  082C               	movf	sprintf@c,w
  2337  0477  1D03               	btfss	3,2
  2338  0478  2C7A               	goto	u1071
  2339  0479  2C7B               	goto	u1070
  2340  047A                     u1071:
  2341  047A  2BA0               	goto	l1568
  2342  047B                     u1070:
  2343  047B                     l1620:
  2344                           
  2345                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2346  047B  082B               	movf	sprintf@sp,w
  2347  047C  0084               	movwf	4
  2348  047D  1383               	bcf	3,7	;select IRP bank0
  2349  047E  0180               	clrf	0
  2350  047F                     l308:
  2351  047F  0008               	return
  2352  0480                     __end_of_sprintf:
  2353                           
  2354                           	psect	text3
  2355  00DB                     __ptext3:	
  2356 ;; *************** function ___lwmod *****************
  2357 ;; Defined at:
  2358 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  divisor         2    8[COMMON] unsigned int 
  2361 ;;  dividend        2   10[COMMON] unsigned int 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  counter         1   13[COMMON] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  2    8[COMMON] unsigned int 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         4       0       0       0       0
  2374 ;;      Locals:         1       0       0       0       0
  2375 ;;      Temps:          1       0       0       0       0
  2376 ;;      Totals:         6       0       0       0       0
  2377 ;;Total ram usage:        6 bytes
  2378 ;; Hardware stack levels used: 1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_sprintf
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386  00DB                     ___lwmod:	
  2387                           ;psect for function ___lwmod
  2388                           
  2389  00DB                     l1424:	
  2390                           ;incstack = 0
  2391                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2392                           
  2393  00DB  0878               	movf	___lwmod@divisor,w
  2394  00DC  0479               	iorwf	___lwmod@divisor+1,w
  2395  00DD  1903               	btfsc	3,2
  2396  00DE  28E0               	goto	u801
  2397  00DF  28E1               	goto	u800
  2398  00E0                     u801:
  2399  00E0  2910               	goto	l1442
  2400  00E1                     u800:
  2401  00E1                     l1426:
  2402  00E1  01FD               	clrf	___lwmod@counter
  2403  00E2  0AFD               	incf	___lwmod@counter,f
  2404  00E3  28EF               	goto	l1432
  2405  00E4                     l1428:
  2406  00E4  3001               	movlw	1
  2407  00E5                     u815:
  2408  00E5  1003               	clrc
  2409  00E6  0DF8               	rlf	___lwmod@divisor,f
  2410  00E7  0DF9               	rlf	___lwmod@divisor+1,f
  2411  00E8  3EFF               	addlw	-1
  2412  00E9  1D03               	skipz
  2413  00EA  28E5               	goto	u815
  2414  00EB                     l1430:
  2415  00EB  3001               	movlw	1
  2416  00EC  00FC               	movwf	??___lwmod
  2417  00ED  087C               	movf	??___lwmod,w
  2418  00EE  07FD               	addwf	___lwmod@counter,f
  2419  00EF                     l1432:
  2420  00EF  1FF9               	btfss	___lwmod@divisor+1,7
  2421  00F0  28F2               	goto	u821
  2422  00F1  28F3               	goto	u820
  2423  00F2                     u821:
  2424  00F2  28E4               	goto	l1428
  2425  00F3                     u820:
  2426  00F3                     l1434:
  2427  00F3  0879               	movf	___lwmod@divisor+1,w
  2428  00F4  027B               	subwf	___lwmod@dividend+1,w
  2429  00F5  1D03               	skipz
  2430  00F6  28F9               	goto	u835
  2431  00F7  0878               	movf	___lwmod@divisor,w
  2432  00F8  027A               	subwf	___lwmod@dividend,w
  2433  00F9                     u835:
  2434  00F9  1C03               	skipc
  2435  00FA  28FC               	goto	u831
  2436  00FB  28FD               	goto	u830
  2437  00FC                     u831:
  2438  00FC  2903               	goto	l1438
  2439  00FD                     u830:
  2440  00FD                     l1436:
  2441  00FD  0878               	movf	___lwmod@divisor,w
  2442  00FE  02FA               	subwf	___lwmod@dividend,f
  2443  00FF  0879               	movf	___lwmod@divisor+1,w
  2444  0100  1C03               	skipc
  2445  0101  03FB               	decf	___lwmod@dividend+1,f
  2446  0102  02FB               	subwf	___lwmod@dividend+1,f
  2447  0103                     l1438:
  2448  0103  3001               	movlw	1
  2449  0104                     u845:
  2450  0104  1003               	clrc
  2451  0105  0CF9               	rrf	___lwmod@divisor+1,f
  2452  0106  0CF8               	rrf	___lwmod@divisor,f
  2453  0107  3EFF               	addlw	-1
  2454  0108  1D03               	skipz
  2455  0109  2904               	goto	u845
  2456  010A                     l1440:
  2457  010A  3001               	movlw	1
  2458  010B  02FD               	subwf	___lwmod@counter,f
  2459  010C  1D03               	btfss	3,2
  2460  010D  290F               	goto	u851
  2461  010E  2910               	goto	u850
  2462  010F                     u851:
  2463  010F  28F3               	goto	l1434
  2464  0110                     u850:
  2465  0110                     l1442:
  2466  0110  087B               	movf	___lwmod@dividend+1,w
  2467  0111  00F9               	movwf	?___lwmod+1
  2468  0112  087A               	movf	___lwmod@dividend,w
  2469  0113  00F8               	movwf	?___lwmod
  2470  0114                     l594:
  2471  0114  0008               	return
  2472  0115                     __end_of___lwmod:
  2473                           
  2474                           	psect	text4
  2475  014F                     __ptext4:	
  2476 ;; *************** function ___lwdiv *****************
  2477 ;; Defined at:
  2478 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  divisor         2    0[COMMON] unsigned int 
  2481 ;;  dividend        2    2[COMMON] unsigned int 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  quotient        2    5[COMMON] unsigned int 
  2484 ;;  counter         1    7[COMMON] unsigned char 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  2    0[COMMON] unsigned int 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2, status,0
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2494 ;;      Params:         4       0       0       0       0
  2495 ;;      Locals:         3       0       0       0       0
  2496 ;;      Temps:          1       0       0       0       0
  2497 ;;      Totals:         8       0       0       0       0
  2498 ;;Total ram usage:        8 bytes
  2499 ;; Hardware stack levels used: 1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_sprintf
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507  014F                     ___lwdiv:	
  2508                           ;psect for function ___lwdiv
  2509                           
  2510  014F                     l1398:	
  2511                           ;incstack = 0
  2512                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2513                           
  2514  014F  01F5               	clrf	___lwdiv@quotient
  2515  0150  01F6               	clrf	___lwdiv@quotient+1
  2516  0151                     l1400:
  2517  0151  0870               	movf	___lwdiv@divisor,w
  2518  0152  0471               	iorwf	___lwdiv@divisor+1,w
  2519  0153  1903               	btfsc	3,2
  2520  0154  2956               	goto	u731
  2521  0155  2957               	goto	u730
  2522  0156                     u731:
  2523  0156  298E               	goto	l1420
  2524  0157                     u730:
  2525  0157                     l1402:
  2526  0157  01F7               	clrf	___lwdiv@counter
  2527  0158  0AF7               	incf	___lwdiv@counter,f
  2528  0159  2965               	goto	l1408
  2529  015A                     l1404:
  2530  015A  3001               	movlw	1
  2531  015B                     u745:
  2532  015B  1003               	clrc
  2533  015C  0DF0               	rlf	___lwdiv@divisor,f
  2534  015D  0DF1               	rlf	___lwdiv@divisor+1,f
  2535  015E  3EFF               	addlw	-1
  2536  015F  1D03               	skipz
  2537  0160  295B               	goto	u745
  2538  0161                     l1406:
  2539  0161  3001               	movlw	1
  2540  0162  00F4               	movwf	??___lwdiv
  2541  0163  0874               	movf	??___lwdiv,w
  2542  0164  07F7               	addwf	___lwdiv@counter,f
  2543  0165                     l1408:
  2544  0165  1FF1               	btfss	___lwdiv@divisor+1,7
  2545  0166  2968               	goto	u751
  2546  0167  2969               	goto	u750
  2547  0168                     u751:
  2548  0168  295A               	goto	l1404
  2549  0169                     u750:
  2550  0169                     l1410:
  2551  0169  3001               	movlw	1
  2552  016A                     u765:
  2553  016A  1003               	clrc
  2554  016B  0DF5               	rlf	___lwdiv@quotient,f
  2555  016C  0DF6               	rlf	___lwdiv@quotient+1,f
  2556  016D  3EFF               	addlw	-1
  2557  016E  1D03               	skipz
  2558  016F  296A               	goto	u765
  2559  0170  0871               	movf	___lwdiv@divisor+1,w
  2560  0171  0273               	subwf	___lwdiv@dividend+1,w
  2561  0172  1D03               	skipz
  2562  0173  2976               	goto	u775
  2563  0174  0870               	movf	___lwdiv@divisor,w
  2564  0175  0272               	subwf	___lwdiv@dividend,w
  2565  0176                     u775:
  2566  0176  1C03               	skipc
  2567  0177  2979               	goto	u771
  2568  0178  297A               	goto	u770
  2569  0179                     u771:
  2570  0179  2981               	goto	l1416
  2571  017A                     u770:
  2572  017A                     l1412:
  2573  017A  0870               	movf	___lwdiv@divisor,w
  2574  017B  02F2               	subwf	___lwdiv@dividend,f
  2575  017C  0871               	movf	___lwdiv@divisor+1,w
  2576  017D  1C03               	skipc
  2577  017E  03F3               	decf	___lwdiv@dividend+1,f
  2578  017F  02F3               	subwf	___lwdiv@dividend+1,f
  2579  0180                     l1414:
  2580  0180  1475               	bsf	___lwdiv@quotient,0
  2581  0181                     l1416:
  2582  0181  3001               	movlw	1
  2583  0182                     u785:
  2584  0182  1003               	clrc
  2585  0183  0CF1               	rrf	___lwdiv@divisor+1,f
  2586  0184  0CF0               	rrf	___lwdiv@divisor,f
  2587  0185  3EFF               	addlw	-1
  2588  0186  1D03               	skipz
  2589  0187  2982               	goto	u785
  2590  0188                     l1418:
  2591  0188  3001               	movlw	1
  2592  0189  02F7               	subwf	___lwdiv@counter,f
  2593  018A  1D03               	btfss	3,2
  2594  018B  298D               	goto	u791
  2595  018C  298E               	goto	u790
  2596  018D                     u791:
  2597  018D  2969               	goto	l1410
  2598  018E                     u790:
  2599  018E                     l1420:
  2600  018E  0876               	movf	___lwdiv@quotient+1,w
  2601  018F  00F1               	movwf	?___lwdiv+1
  2602  0190  0875               	movf	___lwdiv@quotient,w
  2603  0191  00F0               	movwf	?___lwdiv
  2604  0192                     l584:
  2605  0192  0008               	return
  2606  0193                     __end_of___lwdiv:
  2607                           
  2608                           	psect	text5
  2609  0F78                     __ptext5:	
  2610 ;; *************** function _pulsar_boton *****************
  2611 ;; Defined at:
  2612 ;;		line 38 in file "main.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;		None
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2626 ;;      Params:         0       0       0       0       0
  2627 ;;      Locals:         0       0       0       0       0
  2628 ;;      Temps:          2       0       0       0       0
  2629 ;;      Totals:         2       0       0       0       0
  2630 ;;Total ram usage:        2 bytes
  2631 ;; Hardware stack levels used: 1
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639  0F78                     _pulsar_boton:	
  2640                           ;psect for function _pulsar_boton
  2641                           
  2642  0F78                     l1462:	
  2643                           ;incstack = 0
  2644                           ; Regs used in _pulsar_boton: [wreg]
  2645                           
  2646                           
  2647                           ;main.c: 39:         RC2 = 1;
  2648  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  2649  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  2650  0F7A  1507               	bsf	7,2	;volatile
  2651  0F7B                     l1464:
  2652                           
  2653                           ;main.c: 40:         _delay((unsigned long)((100)*(4000000/4000.0)));
  2654  0F7B  3082               	movlw	130
  2655  0F7C  00F1               	movwf	??_pulsar_boton+1
  2656  0F7D  30DD               	movlw	221
  2657  0F7E  00F0               	movwf	??_pulsar_boton
  2658  0F7F                     u1337:
  2659  0F7F  0BF0               	decfsz	??_pulsar_boton,f
  2660  0F80  2F7F               	goto	u1337
  2661  0F81  0BF1               	decfsz	??_pulsar_boton+1,f
  2662  0F82  2F7F               	goto	u1337
  2663  0F83  2F84               	nop2
  2664  0F84                     l1466:
  2665                           
  2666                           ;main.c: 41:         RC2 = 0;
  2667  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  2668  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0F86  1107               	bcf	7,2	;volatile
  2670                           
  2671                           ;main.c: 42:         _delay((unsigned long)((100)*(4000000/4000.0)));
  2672  0F87  3082               	movlw	130
  2673  0F88  00F1               	movwf	??_pulsar_boton+1
  2674  0F89  30DD               	movlw	221
  2675  0F8A  00F0               	movwf	??_pulsar_boton
  2676  0F8B                     u1347:
  2677  0F8B  0BF0               	decfsz	??_pulsar_boton,f
  2678  0F8C  2F8B               	goto	u1347
  2679  0F8D  0BF1               	decfsz	??_pulsar_boton+1,f
  2680  0F8E  2F8B               	goto	u1347
  2681  0F8F  2F90               	nop2
  2682  0F90                     l124:
  2683  0F90  0008               	return
  2684  0F91                     __end_of_pulsar_boton:
  2685                           
  2686                           	psect	text6
  2687  0F45                     __ptext6:	
  2688 ;; *************** function _prender_led_verde *****************
  2689 ;; Defined at:
  2690 ;;		line 26 in file "main.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		None
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2704 ;;      Params:         0       0       0       0       0
  2705 ;;      Locals:         0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0
  2707 ;;      Totals:         0       0       0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used: 1
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_main
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717  0F45                     _prender_led_verde:	
  2718                           ;psect for function _prender_led_verde
  2719                           
  2720  0F45                     l1456:	
  2721                           ;incstack = 0
  2722                           ; Regs used in _prender_led_verde: []
  2723                           
  2724                           
  2725                           ;main.c: 27:     RC0 = 1;
  2726  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0F47  1407               	bsf	7,0	;volatile
  2729  0F48                     l112:
  2730  0F48  0008               	return
  2731  0F49                     __end_of_prender_led_verde:
  2732                           
  2733                           	psect	text7
  2734  0F41                     __ptext7:	
  2735 ;; *************** function _prender_led_rojo *****************
  2736 ;; Defined at:
  2737 ;;		line 32 in file "main.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;		None
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		None
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2751 ;;      Params:         0       0       0       0       0
  2752 ;;      Locals:         0       0       0       0       0
  2753 ;;      Temps:          0       0       0       0       0
  2754 ;;      Totals:         0       0       0       0       0
  2755 ;;Total ram usage:        0 bytes
  2756 ;; Hardware stack levels used: 1
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_main
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764  0F41                     _prender_led_rojo:	
  2765                           ;psect for function _prender_led_rojo
  2766                           
  2767  0F41                     l1458:	
  2768                           ;incstack = 0
  2769                           ; Regs used in _prender_led_rojo: []
  2770                           
  2771                           
  2772                           ;main.c: 33:     RC1 = 1;
  2773  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  2775  0F43  1487               	bsf	7,1	;volatile
  2776  0F44                     l118:
  2777  0F44  0008               	return
  2778  0F45                     __end_of_prender_led_rojo:
  2779                           
  2780                           	psect	text8
  2781  0193                     __ptext8:	
  2782 ;; *************** function _mover *****************
  2783 ;; Defined at:
  2784 ;;		line 68 in file "main.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;		None
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  c               2    9[COMMON] int 
  2789 ;;  c               2    7[COMMON] int 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2799 ;;      Params:         0       0       0       0       0
  2800 ;;      Locals:         4       0       0       0       0
  2801 ;;      Temps:          3       0       0       0       0
  2802 ;;      Totals:         7       0       0       0       0
  2803 ;;Total ram usage:        7 bytes
  2804 ;; Hardware stack levels used: 1
  2805 ;; Hardware stack levels required when called: 3
  2806 ;; This function calls:
  2807 ;;		_Lcd_Shift_Left
  2808 ;;		_Lcd_Shift_Right
  2809 ;; This function is called by:
  2810 ;;		_main
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814  0193                     _mover:	
  2815                           ;psect for function _mover
  2816                           
  2817  0193                     l1502:	
  2818                           ;incstack = 0
  2819                           ; Regs used in _mover: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2820                           
  2821                           
  2822                           ;main.c: 69:   for(int c=0; c<15; c++){
  2823  0193  01F7               	clrf	mover@c
  2824  0194  01F8               	clrf	mover@c+1
  2825  0195                     l1508:
  2826                           
  2827                           ;main.c: 70:     _delay((unsigned long)((350)*(4000000/4000.0)));
  2828  0195  3002               	movlw	2
  2829  0196  00F6               	movwf	??_mover+2
  2830  0197  30C7               	movlw	199
  2831  0198  00F5               	movwf	??_mover+1
  2832  0199  3088               	movlw	136
  2833  019A  00F4               	movwf	??_mover
  2834  019B                     u1357:
  2835  019B  0BF4               	decfsz	??_mover,f
  2836  019C  299B               	goto	u1357
  2837  019D  0BF5               	decfsz	??_mover+1,f
  2838  019E  299B               	goto	u1357
  2839  019F  0BF6               	decfsz	??_mover+2,f
  2840  01A0  299B               	goto	u1357
  2841  01A1  0000               	nop
  2842  01A2                     l1510:
  2843                           
  2844                           ;main.c: 71:     Lcd_Shift_Left();
  2845  01A2  120A  158A  275E  120A  118A  	fcall	_Lcd_Shift_Left
  2846  01A7                     l1512:
  2847                           
  2848                           ;main.c: 72:   }
  2849  01A7  3001               	movlw	1
  2850  01A8  07F7               	addwf	mover@c,f
  2851  01A9  1803               	skipnc
  2852  01AA  0AF8               	incf	mover@c+1,f
  2853  01AB  3000               	movlw	0
  2854  01AC  07F8               	addwf	mover@c+1,f
  2855  01AD                     l1514:
  2856  01AD  0878               	movf	mover@c+1,w
  2857  01AE  3A80               	xorlw	128
  2858  01AF  00FF               	movwf	btemp+1
  2859  01B0  3080               	movlw	128
  2860  01B1  027F               	subwf	btemp+1,w
  2861  01B2  1D03               	skipz
  2862  01B3  29B6               	goto	u875
  2863  01B4  300F               	movlw	15
  2864  01B5  0277               	subwf	mover@c,w
  2865  01B6                     u875:
  2866  01B6  1C03               	skipc
  2867  01B7  29B9               	goto	u871
  2868  01B8  29BA               	goto	u870
  2869  01B9                     u871:
  2870  01B9  2995               	goto	l1508
  2871  01BA                     u870:
  2872  01BA                     l1516:
  2873                           
  2874                           ;main.c: 74:   for(int c=0; c<15; c++){
  2875  01BA  01F9               	clrf	mover@c_113
  2876  01BB  01FA               	clrf	mover@c_113+1
  2877  01BC                     l1522:
  2878                           
  2879                           ;main.c: 75:     _delay((unsigned long)((350)*(4000000/4000.0)));
  2880  01BC  3002               	movlw	2
  2881  01BD  00F6               	movwf	??_mover+2
  2882  01BE  30C7               	movlw	199
  2883  01BF  00F5               	movwf	??_mover+1
  2884  01C0  3088               	movlw	136
  2885  01C1  00F4               	movwf	??_mover
  2886  01C2                     u1367:
  2887  01C2  0BF4               	decfsz	??_mover,f
  2888  01C3  29C2               	goto	u1367
  2889  01C4  0BF5               	decfsz	??_mover+1,f
  2890  01C5  29C2               	goto	u1367
  2891  01C6  0BF6               	decfsz	??_mover+2,f
  2892  01C7  29C2               	goto	u1367
  2893  01C8  0000               	nop
  2894  01C9                     l1524:
  2895                           
  2896                           ;main.c: 76:     Lcd_Shift_Right();
  2897  01C9  120A  158A  276B  120A  118A  	fcall	_Lcd_Shift_Right
  2898  01CE                     l1526:
  2899                           
  2900                           ;main.c: 77:   }
  2901  01CE  3001               	movlw	1
  2902  01CF  07F9               	addwf	mover@c_113,f
  2903  01D0  1803               	skipnc
  2904  01D1  0AFA               	incf	mover@c_113+1,f
  2905  01D2  3000               	movlw	0
  2906  01D3  07FA               	addwf	mover@c_113+1,f
  2907  01D4                     l1528:
  2908  01D4  087A               	movf	mover@c_113+1,w
  2909  01D5  3A80               	xorlw	128
  2910  01D6  00FF               	movwf	btemp+1
  2911  01D7  3080               	movlw	128
  2912  01D8  027F               	subwf	btemp+1,w
  2913  01D9  1D03               	skipz
  2914  01DA  29DD               	goto	u885
  2915  01DB  300F               	movlw	15
  2916  01DC  0279               	subwf	mover@c_113,w
  2917  01DD                     u885:
  2918  01DD  1C03               	skipc
  2919  01DE  29E0               	goto	u881
  2920  01DF  29E1               	goto	u880
  2921  01E0                     u881:
  2922  01E0  29BC               	goto	l1522
  2923  01E1                     u880:
  2924  01E1                     l139:
  2925  01E1  0008               	return
  2926  01E2                     __end_of_mover:
  2927                           
  2928                           	psect	text9
  2929  0F6B                     __ptext9:	
  2930 ;; *************** function _Lcd_Shift_Right *****************
  2931 ;; Defined at:
  2932 ;;		line 112 in file "lcd.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;		None
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;		None
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0, pclath, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2946 ;;      Params:         0       0       0       0       0
  2947 ;;      Locals:         0       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0
  2949 ;;      Totals:         0       0       0       0       0
  2950 ;;Total ram usage:        0 bytes
  2951 ;; Hardware stack levels used: 1
  2952 ;; Hardware stack levels required when called: 2
  2953 ;; This function calls:
  2954 ;;		_Lcd_Cmd
  2955 ;; This function is called by:
  2956 ;;		_mover
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960  0F6B                     _Lcd_Shift_Right:	
  2961                           ;psect for function _Lcd_Shift_Right
  2962                           
  2963  0F6B                     l1394:	
  2964                           ;incstack = 0
  2965                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  2966                           
  2967                           
  2968                           ;lcd.c: 114:  Lcd_Cmd(0x01);
  2969  0F6B  3001               	movlw	1
  2970  0F6C  120A  158A  2791  120A  158A  	fcall	_Lcd_Cmd
  2971                           
  2972                           ;lcd.c: 115:  Lcd_Cmd(0x0C);
  2973  0F71  300C               	movlw	12
  2974  0F72  120A  158A  2791  120A  158A  	fcall	_Lcd_Cmd
  2975  0F77                     l52:
  2976  0F77  0008               	return
  2977  0F78                     __end_of_Lcd_Shift_Right:
  2978                           
  2979                           	psect	text10
  2980  0F5E                     __ptext10:	
  2981 ;; *************** function _Lcd_Shift_Left *****************
  2982 ;; Defined at:
  2983 ;;		line 118 in file "lcd.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, status,0, pclath, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2997 ;;      Params:         0       0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0
  3000 ;;      Totals:         0       0       0       0       0
  3001 ;;Total ram usage:        0 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; Hardware stack levels required when called: 2
  3004 ;; This function calls:
  3005 ;;		_Lcd_Cmd
  3006 ;; This function is called by:
  3007 ;;		_mover
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011  0F5E                     _Lcd_Shift_Left:	
  3012                           ;psect for function _Lcd_Shift_Left
  3013                           
  3014  0F5E                     l1396:	
  3015                           ;incstack = 0
  3016                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  3017                           
  3018                           
  3019                           ;lcd.c: 120:  Lcd_Cmd(0x01);
  3020  0F5E  3001               	movlw	1
  3021  0F5F  120A  158A  2791  120A  158A  	fcall	_Lcd_Cmd
  3022                           
  3023                           ;lcd.c: 121:  Lcd_Cmd(0x08);
  3024  0F64  3008               	movlw	8
  3025  0F65  120A  158A  2791  120A  158A  	fcall	_Lcd_Cmd
  3026  0F6A                     l55:
  3027  0F6A  0008               	return
  3028  0F6B                     __end_of_Lcd_Shift_Left:
  3029                           
  3030                           	psect	text11
  3031  0F3D                     __ptext11:	
  3032 ;; *************** function _apagar_led_rojo *****************
  3033 ;; Defined at:
  3034 ;;		line 35 in file "main.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		None
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3048 ;;      Params:         0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0
  3051 ;;      Totals:         0       0       0       0       0
  3052 ;;Total ram usage:        0 bytes
  3053 ;; Hardware stack levels used: 1
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061  0F3D                     _apagar_led_rojo:	
  3062                           ;psect for function _apagar_led_rojo
  3063                           
  3064  0F3D                     l1460:	
  3065                           ;incstack = 0
  3066                           ; Regs used in _apagar_led_rojo: []
  3067                           
  3068                           
  3069                           ;main.c: 36:     RC1 = 0;
  3070  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0F3F  1087               	bcf	7,1	;volatile
  3073  0F40                     l121:
  3074  0F40  0008               	return
  3075  0F41                     __end_of_apagar_led_rojo:
  3076                           
  3077                           	psect	text12
  3078  0FAB                     __ptext12:	
  3079 ;; *************** function ___wmul *****************
  3080 ;; Defined at:
  3081 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  multiplier      2    0[COMMON] unsigned int 
  3084 ;;  multiplicand    2    2[COMMON] unsigned int 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  product         2    4[COMMON] unsigned int 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  2    0[COMMON] unsigned int 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2, status,0
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3096 ;;      Params:         4       0       0       0       0
  3097 ;;      Locals:         2       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0
  3099 ;;      Totals:         6       0       0       0       0
  3100 ;;Total ram usage:        6 bytes
  3101 ;; Hardware stack levels used: 1
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109  0FAB                     ___wmul:	
  3110                           ;psect for function ___wmul
  3111                           
  3112  0FAB                     l1628:	
  3113                           ;incstack = 0
  3114                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3115                           
  3116  0FAB  01F4               	clrf	___wmul@product
  3117  0FAC  01F5               	clrf	___wmul@product+1
  3118  0FAD                     l1630:
  3119  0FAD  1C70               	btfss	___wmul@multiplier,0
  3120  0FAE  2FB0               	goto	u1081
  3121  0FAF  2FB1               	goto	u1080
  3122  0FB0                     u1081:
  3123  0FB0  2FB7               	goto	l312
  3124  0FB1                     u1080:
  3125  0FB1                     l1632:
  3126  0FB1  0872               	movf	___wmul@multiplicand,w
  3127  0FB2  07F4               	addwf	___wmul@product,f
  3128  0FB3  1803               	skipnc
  3129  0FB4  0AF5               	incf	___wmul@product+1,f
  3130  0FB5  0873               	movf	___wmul@multiplicand+1,w
  3131  0FB6  07F5               	addwf	___wmul@product+1,f
  3132  0FB7                     l312:
  3133  0FB7  3001               	movlw	1
  3134  0FB8                     u1095:
  3135  0FB8  1003               	clrc
  3136  0FB9  0DF2               	rlf	___wmul@multiplicand,f
  3137  0FBA  0DF3               	rlf	___wmul@multiplicand+1,f
  3138  0FBB  3EFF               	addlw	-1
  3139  0FBC  1D03               	skipz
  3140  0FBD  2FB8               	goto	u1095
  3141  0FBE                     l1634:
  3142  0FBE  3001               	movlw	1
  3143  0FBF                     u1105:
  3144  0FBF  1003               	clrc
  3145  0FC0  0CF1               	rrf	___wmul@multiplier+1,f
  3146  0FC1  0CF0               	rrf	___wmul@multiplier,f
  3147  0FC2  3EFF               	addlw	-1
  3148  0FC3  1D03               	skipz
  3149  0FC4  2FBF               	goto	u1105
  3150  0FC5                     l1636:
  3151  0FC5  0870               	movf	___wmul@multiplier,w
  3152  0FC6  0471               	iorwf	___wmul@multiplier+1,w
  3153  0FC7  1D03               	btfss	3,2
  3154  0FC8  2FCA               	goto	u1111
  3155  0FC9  2FCB               	goto	u1110
  3156  0FCA                     u1111:
  3157  0FCA  2FAD               	goto	l1630
  3158  0FCB                     u1110:
  3159  0FCB                     l1638:
  3160  0FCB  0875               	movf	___wmul@product+1,w
  3161  0FCC  00F1               	movwf	?___wmul+1
  3162  0FCD  0874               	movf	___wmul@product,w
  3163  0FCE  00F0               	movwf	?___wmul
  3164  0FCF                     l314:
  3165  0FCF  0008               	return
  3166  0FD0                     __end_of___wmul:
  3167                           
  3168                           	psect	text13
  3169  02F6                     __ptext13:	
  3170 ;; *************** function _Leer_tecla *****************
  3171 ;; Defined at:
  3172 ;;		line 13 in file "teclado.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      unsigned char 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3186 ;;      Params:         0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0
  3188 ;;      Temps:          2       0       0       0       0
  3189 ;;      Totals:         2       0       0       0       0
  3190 ;;Total ram usage:        2 bytes
  3191 ;; Hardware stack levels used: 1
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199  02F6                     _Leer_tecla:	
  3200                           ;psect for function _Leer_tecla
  3201                           
  3202  02F6                     l1530:	
  3203                           ;incstack = 0
  3204                           ; Regs used in _Leer_tecla: [wreg+status,2]
  3205                           
  3206                           
  3207                           ;teclado.c: 15:     x=100;
  3208  02F6  3064               	movlw	100
  3209  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  3210  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  3211  02F9  00C9               	movwf	_x
  3212  02FA  3000               	movlw	0
  3213  02FB  00CA               	movwf	_x+1
  3214                           
  3215                           ;teclado.c: 17:       PORTB=1;
  3216  02FC  3001               	movlw	1
  3217  02FD  0086               	movwf	6	;volatile
  3218                           
  3219                           ;teclado.c: 18:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3220  02FE  300D               	movlw	13
  3221  02FF  00F1               	movwf	??_Leer_tecla+1
  3222  0300  30FB               	movlw	251
  3223  0301  00F0               	movwf	??_Leer_tecla
  3224  0302                     u1377:
  3225  0302  0BF0               	decfsz	??_Leer_tecla,f
  3226  0303  2B02               	goto	u1377
  3227  0304  0BF1               	decfsz	??_Leer_tecla+1,f
  3228  0305  2B02               	goto	u1377
  3229  0306  2B07               	nop2
  3230  0307                     l1532:
  3231                           
  3232                           ;teclado.c: 19:       if (RB4) {
  3233  0307  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0308  1303               	bcf	3,6	;RP1=0, select bank0
  3235  0309  1E06               	btfss	6,4	;volatile
  3236  030A  2B0C               	goto	u891
  3237  030B  2B0D               	goto	u890
  3238  030C                     u891:
  3239  030C  2B12               	goto	l178
  3240  030D                     u890:
  3241  030D                     l1534:
  3242                           
  3243                           ;teclado.c: 20:           x = 1;
  3244  030D  3001               	movlw	1
  3245  030E  00C9               	movwf	_x
  3246  030F  3000               	movlw	0
  3247  0310  00CA               	movwf	_x+1
  3248                           
  3249                           ;teclado.c: 21:       }
  3250  0311  2B23               	goto	l179
  3251  0312                     l178:	
  3252                           ;teclado.c: 22:       else if (RB5) {
  3253                           
  3254  0312  1E86               	btfss	6,5	;volatile
  3255  0313  2B15               	goto	u901
  3256  0314  2B16               	goto	u900
  3257  0315                     u901:
  3258  0315  2B1B               	goto	l180
  3259  0316                     u900:
  3260  0316                     l1536:
  3261                           
  3262                           ;teclado.c: 23:           x = 2;
  3263  0316  3002               	movlw	2
  3264  0317  00C9               	movwf	_x
  3265  0318  3000               	movlw	0
  3266  0319  00CA               	movwf	_x+1
  3267                           
  3268                           ;teclado.c: 24:       }
  3269  031A  2B23               	goto	l179
  3270  031B                     l180:	
  3271                           ;teclado.c: 25:       else if (RB6) {
  3272                           
  3273  031B  1F06               	btfss	6,6	;volatile
  3274  031C  2B1E               	goto	u911
  3275  031D  2B1F               	goto	u910
  3276  031E                     u911:
  3277  031E  2B23               	goto	l179
  3278  031F                     u910:
  3279  031F                     l1538:
  3280                           
  3281                           ;teclado.c: 26:           x = 3;
  3282  031F  3003               	movlw	3
  3283  0320  00C9               	movwf	_x
  3284  0321  3000               	movlw	0
  3285  0322  00CA               	movwf	_x+1
  3286  0323                     l179:
  3287                           
  3288                           ;teclado.c: 28:       PORTB=2;
  3289  0323  3002               	movlw	2
  3290  0324  0086               	movwf	6	;volatile
  3291                           
  3292                           ;teclado.c: 29:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3293  0325  300D               	movlw	13
  3294  0326  00F1               	movwf	??_Leer_tecla+1
  3295  0327  30FB               	movlw	251
  3296  0328  00F0               	movwf	??_Leer_tecla
  3297  0329                     u1387:
  3298  0329  0BF0               	decfsz	??_Leer_tecla,f
  3299  032A  2B29               	goto	u1387
  3300  032B  0BF1               	decfsz	??_Leer_tecla+1,f
  3301  032C  2B29               	goto	u1387
  3302  032D  2B2E               	nop2
  3303  032E                     l1540:
  3304                           
  3305                           ;teclado.c: 30:       if (RB4) {
  3306  032E  1283               	bcf	3,5	;RP0=0, select bank0
  3307  032F  1303               	bcf	3,6	;RP1=0, select bank0
  3308  0330  1E06               	btfss	6,4	;volatile
  3309  0331  2B33               	goto	u921
  3310  0332  2B34               	goto	u920
  3311  0333                     u921:
  3312  0333  2B39               	goto	l183
  3313  0334                     u920:
  3314  0334                     l1542:
  3315                           
  3316                           ;teclado.c: 31:           x = 4;
  3317  0334  3004               	movlw	4
  3318  0335  00C9               	movwf	_x
  3319  0336  3000               	movlw	0
  3320  0337  00CA               	movwf	_x+1
  3321                           
  3322                           ;teclado.c: 32:       }
  3323  0338  2B4A               	goto	l184
  3324  0339                     l183:	
  3325                           ;teclado.c: 33:       else if (RB5) {
  3326                           
  3327  0339  1E86               	btfss	6,5	;volatile
  3328  033A  2B3C               	goto	u931
  3329  033B  2B3D               	goto	u930
  3330  033C                     u931:
  3331  033C  2B42               	goto	l185
  3332  033D                     u930:
  3333  033D                     l1544:
  3334                           
  3335                           ;teclado.c: 34:           x = 5;
  3336  033D  3005               	movlw	5
  3337  033E  00C9               	movwf	_x
  3338  033F  3000               	movlw	0
  3339  0340  00CA               	movwf	_x+1
  3340                           
  3341                           ;teclado.c: 35:       }
  3342  0341  2B4A               	goto	l184
  3343  0342                     l185:	
  3344                           ;teclado.c: 36:       else if (RB6) {
  3345                           
  3346  0342  1F06               	btfss	6,6	;volatile
  3347  0343  2B45               	goto	u941
  3348  0344  2B46               	goto	u940
  3349  0345                     u941:
  3350  0345  2B4A               	goto	l184
  3351  0346                     u940:
  3352  0346                     l1546:
  3353                           
  3354                           ;teclado.c: 37:           x = 6;
  3355  0346  3006               	movlw	6
  3356  0347  00C9               	movwf	_x
  3357  0348  3000               	movlw	0
  3358  0349  00CA               	movwf	_x+1
  3359  034A                     l184:
  3360                           
  3361                           ;teclado.c: 39:       PORTB=4;
  3362  034A  3004               	movlw	4
  3363  034B  0086               	movwf	6	;volatile
  3364                           
  3365                           ;teclado.c: 40:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3366  034C  300D               	movlw	13
  3367  034D  00F1               	movwf	??_Leer_tecla+1
  3368  034E  30FB               	movlw	251
  3369  034F  00F0               	movwf	??_Leer_tecla
  3370  0350                     u1397:
  3371  0350  0BF0               	decfsz	??_Leer_tecla,f
  3372  0351  2B50               	goto	u1397
  3373  0352  0BF1               	decfsz	??_Leer_tecla+1,f
  3374  0353  2B50               	goto	u1397
  3375  0354  2B55               	nop2
  3376  0355                     l1548:
  3377                           
  3378                           ;teclado.c: 41:       if (RB4) {
  3379  0355  1283               	bcf	3,5	;RP0=0, select bank0
  3380  0356  1303               	bcf	3,6	;RP1=0, select bank0
  3381  0357  1E06               	btfss	6,4	;volatile
  3382  0358  2B5A               	goto	u951
  3383  0359  2B5B               	goto	u950
  3384  035A                     u951:
  3385  035A  2B60               	goto	l188
  3386  035B                     u950:
  3387  035B                     l1550:
  3388                           
  3389                           ;teclado.c: 42:           x = 7;
  3390  035B  3007               	movlw	7
  3391  035C  00C9               	movwf	_x
  3392  035D  3000               	movlw	0
  3393  035E  00CA               	movwf	_x+1
  3394                           
  3395                           ;teclado.c: 43:       }
  3396  035F  2B71               	goto	l189
  3397  0360                     l188:	
  3398                           ;teclado.c: 44:       else if (RB5) {
  3399                           
  3400  0360  1E86               	btfss	6,5	;volatile
  3401  0361  2B63               	goto	u961
  3402  0362  2B64               	goto	u960
  3403  0363                     u961:
  3404  0363  2B69               	goto	l190
  3405  0364                     u960:
  3406  0364                     l1552:
  3407                           
  3408                           ;teclado.c: 45:           x = 8;
  3409  0364  3008               	movlw	8
  3410  0365  00C9               	movwf	_x
  3411  0366  3000               	movlw	0
  3412  0367  00CA               	movwf	_x+1
  3413                           
  3414                           ;teclado.c: 46:       }
  3415  0368  2B71               	goto	l189
  3416  0369                     l190:	
  3417                           ;teclado.c: 47:       else if (RB6) {
  3418                           
  3419  0369  1F06               	btfss	6,6	;volatile
  3420  036A  2B6C               	goto	u971
  3421  036B  2B6D               	goto	u970
  3422  036C                     u971:
  3423  036C  2B71               	goto	l189
  3424  036D                     u970:
  3425  036D                     l1554:
  3426                           
  3427                           ;teclado.c: 48:           x = 9;
  3428  036D  3009               	movlw	9
  3429  036E  00C9               	movwf	_x
  3430  036F  3000               	movlw	0
  3431  0370  00CA               	movwf	_x+1
  3432  0371                     l189:
  3433                           
  3434                           ;teclado.c: 50:       PORTB=8;
  3435  0371  3008               	movlw	8
  3436  0372  0086               	movwf	6	;volatile
  3437                           
  3438                           ;teclado.c: 51:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3439  0373  300D               	movlw	13
  3440  0374  00F1               	movwf	??_Leer_tecla+1
  3441  0375  30FB               	movlw	251
  3442  0376  00F0               	movwf	??_Leer_tecla
  3443  0377                     u1407:
  3444  0377  0BF0               	decfsz	??_Leer_tecla,f
  3445  0378  2B77               	goto	u1407
  3446  0379  0BF1               	decfsz	??_Leer_tecla+1,f
  3447  037A  2B77               	goto	u1407
  3448  037B  2B7C               	nop2
  3449  037C                     l1556:
  3450                           
  3451                           ;teclado.c: 52:       if (RB4) {
  3452  037C  1283               	bcf	3,5	;RP0=0, select bank0
  3453  037D  1303               	bcf	3,6	;RP1=0, select bank0
  3454  037E  1E06               	btfss	6,4	;volatile
  3455  037F  2B81               	goto	u981
  3456  0380  2B82               	goto	u980
  3457  0381                     u981:
  3458  0381  2B87               	goto	l193
  3459  0382                     u980:
  3460  0382                     l1558:
  3461                           
  3462                           ;teclado.c: 53:           x = 42;
  3463  0382  302A               	movlw	42
  3464  0383  00C9               	movwf	_x
  3465  0384  3000               	movlw	0
  3466  0385  00CA               	movwf	_x+1
  3467                           
  3468                           ;teclado.c: 54:       }
  3469  0386  2B96               	goto	l194
  3470  0387                     l193:	
  3471                           ;teclado.c: 55:       else if (RB5) {
  3472                           
  3473  0387  1E86               	btfss	6,5	;volatile
  3474  0388  2B8A               	goto	u991
  3475  0389  2B8B               	goto	u990
  3476  038A                     u991:
  3477  038A  2B8E               	goto	l195
  3478  038B                     u990:
  3479  038B                     l1560:
  3480                           
  3481                           ;teclado.c: 56:           x = 0;
  3482  038B  01C9               	clrf	_x
  3483  038C  01CA               	clrf	_x+1
  3484                           
  3485                           ;teclado.c: 57:       }
  3486  038D  2B96               	goto	l194
  3487  038E                     l195:	
  3488                           ;teclado.c: 58:       else if (RB6) {
  3489                           
  3490  038E  1F06               	btfss	6,6	;volatile
  3491  038F  2B91               	goto	u1001
  3492  0390  2B92               	goto	u1000
  3493  0391                     u1001:
  3494  0391  2B96               	goto	l194
  3495  0392                     u1000:
  3496  0392                     l1562:
  3497                           
  3498                           ;teclado.c: 59:           x = 35;
  3499  0392  3023               	movlw	35
  3500  0393  00C9               	movwf	_x
  3501  0394  3000               	movlw	0
  3502  0395  00CA               	movwf	_x+1
  3503  0396                     l194:
  3504                           
  3505                           ;teclado.c: 61:     return x;
  3506  0396  0849               	movf	_x,w
  3507  0397                     l198:
  3508  0397  0008               	return
  3509  0398                     __end_of_Leer_tecla:
  3510                           
  3511                           	psect	text14
  3512  0234                     __ptext14:	
  3513 ;; *************** function _Lcd_Init *****************
  3514 ;; Defined at:
  3515 ;;		line 70 in file "lcd.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;		None
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0, pclath, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3529 ;;      Params:         0       0       0       0       0
  3530 ;;      Locals:         0       0       0       0       0
  3531 ;;      Temps:          2       0       0       0       0
  3532 ;;      Totals:         2       0       0       0       0
  3533 ;;Total ram usage:        2 bytes
  3534 ;; Hardware stack levels used: 1
  3535 ;; Hardware stack levels required when called: 2
  3536 ;; This function calls:
  3537 ;;		_Lcd_Cmd
  3538 ;;		_Lcd_Port
  3539 ;; This function is called by:
  3540 ;;		_main
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544  0234                     _Lcd_Init:	
  3545                           ;psect for function _Lcd_Init
  3546                           
  3547  0234                     l1446:	
  3548                           ;incstack = 0
  3549                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3550                           
  3551                           
  3552                           ;lcd.c: 72:   Lcd_Port(0x00);
  3553  0234  3000               	movlw	0
  3554  0235  120A  118A  2082  120A  118A  	fcall	_Lcd_Port
  3555  023A                     l1448:
  3556                           
  3557                           ;lcd.c: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  3558  023A  301A               	movlw	26
  3559  023B  00F5               	movwf	??_Lcd_Init+1
  3560  023C  30F8               	movlw	248
  3561  023D  00F4               	movwf	??_Lcd_Init
  3562  023E                     u1417:
  3563  023E  0BF4               	decfsz	??_Lcd_Init,f
  3564  023F  2A3E               	goto	u1417
  3565  0240  0BF5               	decfsz	??_Lcd_Init+1,f
  3566  0241  2A3E               	goto	u1417
  3567  0242  0000               	nop
  3568  0243                     l1450:
  3569                           
  3570                           ;lcd.c: 74:   Lcd_Cmd(0x03);
  3571  0243  3003               	movlw	3
  3572  0244  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3573                           
  3574                           ;lcd.c: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3575  0249  3007               	movlw	7
  3576  024A  00F5               	movwf	??_Lcd_Init+1
  3577  024B  307D               	movlw	125
  3578  024C  00F4               	movwf	??_Lcd_Init
  3579  024D                     u1427:
  3580  024D  0BF4               	decfsz	??_Lcd_Init,f
  3581  024E  2A4D               	goto	u1427
  3582  024F  0BF5               	decfsz	??_Lcd_Init+1,f
  3583  0250  2A4D               	goto	u1427
  3584  0251                     l1452:
  3585                           
  3586                           ;lcd.c: 76:   Lcd_Cmd(0x03);
  3587  0251  3003               	movlw	3
  3588  0252  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3589  0257                     l1454:
  3590                           
  3591                           ;lcd.c: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  3592  0257  300F               	movlw	15
  3593  0258  00F5               	movwf	??_Lcd_Init+1
  3594  0259  3047               	movlw	71
  3595  025A  00F4               	movwf	??_Lcd_Init
  3596  025B                     u1437:
  3597  025B  0BF4               	decfsz	??_Lcd_Init,f
  3598  025C  2A5B               	goto	u1437
  3599  025D  0BF5               	decfsz	??_Lcd_Init+1,f
  3600  025E  2A5B               	goto	u1437
  3601  025F  2A60               	nop2
  3602                           
  3603                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  3604  0260  3003               	movlw	3
  3605  0261  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3606                           
  3607                           ;lcd.c: 80:   Lcd_Cmd(0x02);
  3608  0266  3002               	movlw	2
  3609  0267  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3610                           
  3611                           ;lcd.c: 81:   Lcd_Cmd(0x02);
  3612  026C  3002               	movlw	2
  3613  026D  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3614                           
  3615                           ;lcd.c: 82:   Lcd_Cmd(0x08);
  3616  0272  3008               	movlw	8
  3617  0273  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3618                           
  3619                           ;lcd.c: 83:   Lcd_Cmd(0x00);
  3620  0278  3000               	movlw	0
  3621  0279  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3622                           
  3623                           ;lcd.c: 84:   Lcd_Cmd(0x0C);
  3624  027E  300C               	movlw	12
  3625  027F  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3626                           
  3627                           ;lcd.c: 85:   Lcd_Cmd(0x00);
  3628  0284  3000               	movlw	0
  3629  0285  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3630                           
  3631                           ;lcd.c: 86:   Lcd_Cmd(0x06);
  3632  028A  3006               	movlw	6
  3633  028B  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  3634  0290                     l40:
  3635  0290  0008               	return
  3636  0291                     __end_of_Lcd_Init:
  3637                           
  3638                           	psect	text15
  3639  0291                     __ptext15:	
  3640 ;; *************** function _Alarma *****************
  3641 ;; Defined at:
  3642 ;;		line 44 in file "main.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  a               2    0[BANK0 ] int 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3656 ;;      Params:         0       0       0       0       0
  3657 ;;      Locals:         0       2       0       0       0
  3658 ;;      Temps:          3       0       0       0       0
  3659 ;;      Totals:         3       2       0       0       0
  3660 ;;Total ram usage:        5 bytes
  3661 ;; Hardware stack levels used: 1
  3662 ;; Hardware stack levels required when called: 3
  3663 ;; This function calls:
  3664 ;;		_Lcd_Clear
  3665 ;;		_Lcd_Set_Cursor
  3666 ;;		_Lcd_Write_String
  3667 ;; This function is called by:
  3668 ;;		_main
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672  0291                     _Alarma:	
  3673                           ;psect for function _Alarma
  3674                           
  3675  0291                     l1468:	
  3676                           ;incstack = 0
  3677                           ; Regs used in _Alarma: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3678                           
  3679                           
  3680                           ;main.c: 45:     for(int a=0; a<=4; a++){
  3681  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3683  0293  01A0               	clrf	Alarma@a
  3684  0294  01A1               	clrf	Alarma@a+1
  3685  0295                     l1474:
  3686                           
  3687                           ;main.c: 46:         Lcd_Clear();
  3688  0295  120A  158A  2751  120A  118A  	fcall	_Lcd_Clear
  3689                           
  3690                           ;main.c: 47:         Lcd_Set_Cursor(1,6);
  3691  029A  3006               	movlw	6
  3692  029B  00FB               	movwf	??_Alarma
  3693  029C  087B               	movf	??_Alarma,w
  3694  029D  00F4               	movwf	Lcd_Set_Cursor@b
  3695  029E  3001               	movlw	1
  3696  029F  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  3697  02A4                     l1476:
  3698                           
  3699                           ;main.c: 48:         Lcd_Write_String("Caja");
  3700  02A4  3069               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3701  02A5  00F5               	movwf	Lcd_Write_String@a
  3702  02A6  3080               	movlw	128
  3703  02A7  00F6               	movwf	Lcd_Write_String@a+1
  3704  02A8  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  3705  02AD                     l1478:
  3706                           
  3707                           ;main.c: 49:         Lcd_Set_Cursor(2,4);
  3708  02AD  3004               	movlw	4
  3709  02AE  00FB               	movwf	??_Alarma
  3710  02AF  087B               	movf	??_Alarma,w
  3711  02B0  00F4               	movwf	Lcd_Set_Cursor@b
  3712  02B1  3002               	movlw	2
  3713  02B2  120A  118A  21E2  120A  118A  	fcall	_Lcd_Set_Cursor
  3714                           
  3715                           ;main.c: 50:         Lcd_Write_String("Bloqueada");
  3716  02B7  303C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3717  02B8  00F5               	movwf	Lcd_Write_String@a
  3718  02B9  3080               	movlw	128
  3719  02BA  00F6               	movwf	Lcd_Write_String@a+1
  3720  02BB  120A  158A  27D0  120A  118A  	fcall	_Lcd_Write_String
  3721  02C0                     l1480:
  3722                           
  3723                           ;main.c: 52:         RC2 = 1;
  3724  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3725  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3726  02C2  1507               	bsf	7,2	;volatile
  3727  02C3                     l1482:
  3728                           
  3729                           ;main.c: 53:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  3730  02C3  3006               	movlw	6
  3731  02C4  00FD               	movwf	??_Alarma+2
  3732  02C5  3013               	movlw	19
  3733  02C6  00FC               	movwf	??_Alarma+1
  3734  02C7  30AD               	movlw	173
  3735  02C8  00FB               	movwf	??_Alarma
  3736  02C9                     u1447:
  3737  02C9  0BFB               	decfsz	??_Alarma,f
  3738  02CA  2AC9               	goto	u1447
  3739  02CB  0BFC               	decfsz	??_Alarma+1,f
  3740  02CC  2AC9               	goto	u1447
  3741  02CD  0BFD               	decfsz	??_Alarma+2,f
  3742  02CE  2AC9               	goto	u1447
  3743  02CF  2AD0               	nop2
  3744  02D0                     l1484:
  3745                           
  3746                           ;main.c: 54:         RC2 = 0;
  3747  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3748  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3749  02D2  1107               	bcf	7,2	;volatile
  3750  02D3                     l1486:
  3751                           
  3752                           ;main.c: 55:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  3753  02D3  3006               	movlw	6
  3754  02D4  00FD               	movwf	??_Alarma+2
  3755  02D5  3013               	movlw	19
  3756  02D6  00FC               	movwf	??_Alarma+1
  3757  02D7  30AD               	movlw	173
  3758  02D8  00FB               	movwf	??_Alarma
  3759  02D9                     u1457:
  3760  02D9  0BFB               	decfsz	??_Alarma,f
  3761  02DA  2AD9               	goto	u1457
  3762  02DB  0BFC               	decfsz	??_Alarma+1,f
  3763  02DC  2AD9               	goto	u1457
  3764  02DD  0BFD               	decfsz	??_Alarma+2,f
  3765  02DE  2AD9               	goto	u1457
  3766  02DF  2AE0               	nop2
  3767  02E0                     l1488:
  3768                           
  3769                           ;main.c: 56:     }
  3770  02E0  3001               	movlw	1
  3771  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  3772  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  3773  02E3  07A0               	addwf	Alarma@a,f
  3774  02E4  1803               	skipnc
  3775  02E5  0AA1               	incf	Alarma@a+1,f
  3776  02E6  3000               	movlw	0
  3777  02E7  07A1               	addwf	Alarma@a+1,f
  3778  02E8                     l1490:
  3779  02E8  0821               	movf	Alarma@a+1,w
  3780  02E9  3A80               	xorlw	128
  3781  02EA  00FF               	movwf	btemp+1
  3782  02EB  3080               	movlw	128
  3783  02EC  027F               	subwf	btemp+1,w
  3784  02ED  1D03               	skipz
  3785  02EE  2AF1               	goto	u865
  3786  02EF  3005               	movlw	5
  3787  02F0  0220               	subwf	Alarma@a,w
  3788  02F1                     u865:
  3789  02F1  1C03               	skipc
  3790  02F2  2AF4               	goto	u861
  3791  02F3  2AF5               	goto	u860
  3792  02F4                     u861:
  3793  02F4  2A95               	goto	l1474
  3794  02F5                     u860:
  3795  02F5                     l129:
  3796  02F5  0008               	return
  3797  02F6                     __end_of_Alarma:
  3798                           
  3799                           	psect	text16
  3800  0FD0                     __ptext16:	
  3801 ;; *************** function _Lcd_Write_String *****************
  3802 ;; Defined at:
  3803 ;;		line 105 in file "lcd.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  a               2    5[COMMON] PTR unsigned char 
  3806 ;;		 -> STR_20(5), STR_19(15), STR_18(11), STR_17(6), 
  3807 ;;		 -> STR_16(9), STR_15(6), STR_13(2), STR_11(2), 
  3808 ;;		 -> STR_9(2), STR_7(2), STR_6(5), STR_5(15), 
  3809 ;;		 -> STR_4(23), STR_3(5), RAM(512), STR_2(10), 
  3810 ;;		 -> STR_1(5), 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  i               2    7[COMMON] int 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3822 ;;      Params:         2       0       0       0       0
  3823 ;;      Locals:         2       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0
  3825 ;;      Totals:         4       0       0       0       0
  3826 ;;Total ram usage:        4 bytes
  3827 ;; Hardware stack levels used: 1
  3828 ;; Hardware stack levels required when called: 2
  3829 ;; This function calls:
  3830 ;;		_Lcd_Write_Char
  3831 ;; This function is called by:
  3832 ;;		_Alarma
  3833 ;;		_ver_clave
  3834 ;;		_main
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838  0FD0                     _Lcd_Write_String:	
  3839                           ;psect for function _Lcd_Write_String
  3840                           
  3841  0FD0                     l1386:	
  3842                           ;incstack = 0
  3843                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3844                           
  3845                           
  3846                           ;lcd.c: 105: void Lcd_Write_String(char *a);lcd.c: 106: {;lcd.c: 107:  int i;;lcd.c: 108
      +                          :  for(i=0;a[i]!='\0';i++)
  3847  0FD0  01F7               	clrf	Lcd_Write_String@i
  3848  0FD1  01F8               	clrf	Lcd_Write_String@i+1
  3849  0FD2  2FEB               	goto	l1392
  3850  0FD3                     l1388:
  3851                           
  3852                           ;lcd.c: 109:     Lcd_Write_Char(a[i]);
  3853  0FD3  0877               	movf	Lcd_Write_String@i,w
  3854  0FD4  0775               	addwf	Lcd_Write_String@a,w
  3855  0FD5  0084               	movwf	4
  3856  0FD6  0878               	movf	Lcd_Write_String@i+1,w
  3857  0FD7  1803               	skipnc
  3858  0FD8  0A78               	incf	Lcd_Write_String@i+1,w
  3859  0FD9  0776               	addwf	Lcd_Write_String@a+1,w
  3860  0FDA  00FF               	movwf	btemp+1
  3861  0FDB  120A  118A  2003  120A  158A  	fcall	stringtab
  3862  0FE0  120A  118A  20A4  120A  158A  	fcall	_Lcd_Write_Char
  3863  0FE5                     l1390:
  3864  0FE5  3001               	movlw	1
  3865  0FE6  07F7               	addwf	Lcd_Write_String@i,f
  3866  0FE7  1803               	skipnc
  3867  0FE8  0AF8               	incf	Lcd_Write_String@i+1,f
  3868  0FE9  3000               	movlw	0
  3869  0FEA  07F8               	addwf	Lcd_Write_String@i+1,f
  3870  0FEB                     l1392:
  3871  0FEB  0877               	movf	Lcd_Write_String@i,w
  3872  0FEC  0775               	addwf	Lcd_Write_String@a,w
  3873  0FED  0084               	movwf	4
  3874  0FEE  0878               	movf	Lcd_Write_String@i+1,w
  3875  0FEF  1803               	skipnc
  3876  0FF0  0A78               	incf	Lcd_Write_String@i+1,w
  3877  0FF1  0776               	addwf	Lcd_Write_String@a+1,w
  3878  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  3879  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  3880  0FF4  00FF               	movwf	btemp+1
  3881  0FF5  120A  118A  2003  120A  158A  	fcall	stringtab
  3882  0FFA  3A00               	xorlw	0
  3883  0FFB  1D03               	skipz
  3884  0FFC  2FFE               	goto	u721
  3885  0FFD  2FFF               	goto	u720
  3886  0FFE                     u721:
  3887  0FFE  2FD3               	goto	l1388
  3888  0FFF                     u720:
  3889  0FFF                     l49:
  3890  0FFF  0008               	return
  3891  1000                     __end_of_Lcd_Write_String:
  3892                           
  3893                           	psect	text17
  3894  00A4                     __ptext17:	
  3895 ;; *************** function _Lcd_Write_Char *****************
  3896 ;; Defined at:
  3897 ;;		line 89 in file "lcd.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  a               1    wreg     unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  a               1    4[COMMON] unsigned char 
  3902 ;;  y               1    3[COMMON] unsigned char 
  3903 ;;  temp            1    2[COMMON] unsigned char 
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, status,2, status,0, pclath, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3913 ;;      Params:         0       0       0       0       0
  3914 ;;      Locals:         3       0       0       0       0
  3915 ;;      Temps:          1       0       0       0       0
  3916 ;;      Totals:         4       0       0       0       0
  3917 ;;Total ram usage:        4 bytes
  3918 ;; Hardware stack levels used: 1
  3919 ;; Hardware stack levels required when called: 1
  3920 ;; This function calls:
  3921 ;;		_Lcd_Port
  3922 ;; This function is called by:
  3923 ;;		_Lcd_Write_String
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927  00A4                     _Lcd_Write_Char:	
  3928                           ;psect for function _Lcd_Write_Char
  3929                           
  3930                           
  3931                           ;incstack = 0
  3932                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3933                           ;Lcd_Write_Char@a stored from wreg
  3934  00A4  00F4               	movwf	Lcd_Write_Char@a
  3935  00A5                     l1344:
  3936                           
  3937                           ;lcd.c: 89: void Lcd_Write_Char(char a);lcd.c: 90: {;lcd.c: 91:    char temp,y;;lcd.c: 9
      +                          2:    temp = a&0x0F;
  3938  00A5  0874               	movf	Lcd_Write_Char@a,w
  3939  00A6  390F               	andlw	15
  3940  00A7  00F1               	movwf	??_Lcd_Write_Char
  3941  00A8  0871               	movf	??_Lcd_Write_Char,w
  3942  00A9  00F2               	movwf	Lcd_Write_Char@temp
  3943                           
  3944                           ;lcd.c: 93:    y = a&0xF0;
  3945  00AA  0874               	movf	Lcd_Write_Char@a,w
  3946  00AB  39F0               	andlw	240
  3947  00AC  00F1               	movwf	??_Lcd_Write_Char
  3948  00AD  0871               	movf	??_Lcd_Write_Char,w
  3949  00AE  00F3               	movwf	Lcd_Write_Char@y
  3950  00AF                     l1346:
  3951                           
  3952                           ;lcd.c: 94:    RD2 = 1;
  3953  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  3954  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  3955  00B1  1508               	bsf	8,2	;volatile
  3956  00B2                     l1348:
  3957                           
  3958                           ;lcd.c: 95:    Lcd_Port(y>>4);
  3959  00B2  0873               	movf	Lcd_Write_Char@y,w
  3960  00B3  00F1               	movwf	??_Lcd_Write_Char
  3961  00B4  3004               	movlw	4
  3962  00B5                     u675:
  3963  00B5  1003               	clrc
  3964  00B6  0CF1               	rrf	??_Lcd_Write_Char,f
  3965  00B7  3EFF               	addlw	-1
  3966  00B8  1D03               	skipz
  3967  00B9  28B5               	goto	u675
  3968  00BA  0871               	movf	??_Lcd_Write_Char,w
  3969  00BB  120A  118A  2082  120A  118A  	fcall	_Lcd_Port
  3970  00C0                     l1350:
  3971                           
  3972                           ;lcd.c: 96:    RD3 = 1;
  3973  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  3974  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  3975  00C2  1588               	bsf	8,3	;volatile
  3976  00C3                     l1352:
  3977                           
  3978                           ;lcd.c: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3979  00C3  300D               	movlw	13
  3980  00C4  00F1               	movwf	??_Lcd_Write_Char
  3981  00C5                     u1467:
  3982  00C5  0BF1               	decfsz	??_Lcd_Write_Char,f
  3983  00C6  28C5               	goto	u1467
  3984  00C7                     l1354:
  3985                           
  3986                           ;lcd.c: 98:    RD3 = 0;
  3987  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  3988  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  3989  00C9  1188               	bcf	8,3	;volatile
  3990  00CA                     l1356:
  3991                           
  3992                           ;lcd.c: 99:    Lcd_Port(temp);
  3993  00CA  0872               	movf	Lcd_Write_Char@temp,w
  3994  00CB  120A  118A  2082  120A  118A  	fcall	_Lcd_Port
  3995  00D0                     l1358:
  3996                           
  3997                           ;lcd.c: 100:    RD3 = 1;
  3998  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  3999  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  4000  00D2  1588               	bsf	8,3	;volatile
  4001  00D3                     l1360:
  4002                           
  4003                           ;lcd.c: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  4004  00D3  300D               	movlw	13
  4005  00D4  00F1               	movwf	??_Lcd_Write_Char
  4006  00D5                     u1477:
  4007  00D5  0BF1               	decfsz	??_Lcd_Write_Char,f
  4008  00D6  28D5               	goto	u1477
  4009  00D7                     l1362:
  4010                           
  4011                           ;lcd.c: 102:    RD3 = 0;
  4012  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  4013  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  4014  00D9  1188               	bcf	8,3	;volatile
  4015  00DA                     l43:
  4016  00DA  0008               	return
  4017  00DB                     __end_of_Lcd_Write_Char:
  4018                           
  4019                           	psect	text18
  4020  01E2                     __ptext18:	
  4021 ;; *************** function _Lcd_Set_Cursor *****************
  4022 ;; Defined at:
  4023 ;;		line 49 in file "lcd.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  a               1    wreg     unsigned char 
  4026 ;;  b               1    4[COMMON] unsigned char 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  a               1    7[COMMON] unsigned char 
  4029 ;;  temp            1   10[COMMON] unsigned char 
  4030 ;;  y               1    9[COMMON] unsigned char 
  4031 ;;  z               1    8[COMMON] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0, pclath, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4041 ;;      Params:         1       0       0       0       0
  4042 ;;      Locals:         4       0       0       0       0
  4043 ;;      Temps:          2       0       0       0       0
  4044 ;;      Totals:         7       0       0       0       0
  4045 ;;Total ram usage:        7 bytes
  4046 ;; Hardware stack levels used: 1
  4047 ;; Hardware stack levels required when called: 2
  4048 ;; This function calls:
  4049 ;;		_Lcd_Cmd
  4050 ;; This function is called by:
  4051 ;;		_Alarma
  4052 ;;		_ver_clave
  4053 ;;		_main
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057  01E2                     _Lcd_Set_Cursor:	
  4058                           ;psect for function _Lcd_Set_Cursor
  4059                           
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4063                           ;Lcd_Set_Cursor@a stored from wreg
  4064  01E2  00F7               	movwf	Lcd_Set_Cursor@a
  4065  01E3                     l1366:
  4066                           
  4067                           ;lcd.c: 49: void Lcd_Set_Cursor(char a, char b);lcd.c: 50: {;lcd.c: 51:  char temp,z,y;;
      +                          lcd.c: 52:  if(a == 1)
  4068  01E3  0377               	decf	Lcd_Set_Cursor@a,w
  4069  01E4  1D03               	btfss	3,2
  4070  01E5  29E7               	goto	u681
  4071  01E6  29E8               	goto	u680
  4072  01E7                     u681:
  4073  01E7  2A0B               	goto	l1376
  4074  01E8                     u680:
  4075  01E8                     l1368:
  4076                           
  4077                           ;lcd.c: 53:  {;lcd.c: 54:    temp = 0x80 + b - 1;
  4078  01E8  0874               	movf	Lcd_Set_Cursor@b,w
  4079  01E9  3E7F               	addlw	127
  4080  01EA  00F5               	movwf	??_Lcd_Set_Cursor
  4081  01EB  0875               	movf	??_Lcd_Set_Cursor,w
  4082  01EC  00FA               	movwf	Lcd_Set_Cursor@temp
  4083                           
  4084                           ;lcd.c: 55:   z = temp>>4;
  4085  01ED  087A               	movf	Lcd_Set_Cursor@temp,w
  4086  01EE  00F5               	movwf	??_Lcd_Set_Cursor
  4087  01EF  3004               	movlw	4
  4088  01F0                     u695:
  4089  01F0  1003               	clrc
  4090  01F1  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4091  01F2  3EFF               	addlw	-1
  4092  01F3  1D03               	skipz
  4093  01F4  29F0               	goto	u695
  4094  01F5  0875               	movf	??_Lcd_Set_Cursor,w
  4095  01F6  00F6               	movwf	??_Lcd_Set_Cursor+1
  4096  01F7  0876               	movf	??_Lcd_Set_Cursor+1,w
  4097  01F8  00F8               	movwf	Lcd_Set_Cursor@z
  4098  01F9                     l1370:
  4099                           
  4100                           ;lcd.c: 56:   y = temp & 0x0F;
  4101  01F9  087A               	movf	Lcd_Set_Cursor@temp,w
  4102  01FA  390F               	andlw	15
  4103  01FB  00F5               	movwf	??_Lcd_Set_Cursor
  4104  01FC  0875               	movf	??_Lcd_Set_Cursor,w
  4105  01FD  00F9               	movwf	Lcd_Set_Cursor@y
  4106  01FE                     l1372:
  4107                           
  4108                           ;lcd.c: 57:   Lcd_Cmd(z);
  4109  01FE  0878               	movf	Lcd_Set_Cursor@z,w
  4110  01FF  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  4111  0204                     l1374:
  4112                           
  4113                           ;lcd.c: 58:   Lcd_Cmd(y);
  4114  0204  0879               	movf	Lcd_Set_Cursor@y,w
  4115  0205  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  4116                           
  4117                           ;lcd.c: 59:  }
  4118  020A  2A33               	goto	l37
  4119  020B                     l1376:
  4120  020B  3002               	movlw	2
  4121  020C  0677               	xorwf	Lcd_Set_Cursor@a,w
  4122  020D  1D03               	btfss	3,2
  4123  020E  2A10               	goto	u701
  4124  020F  2A11               	goto	u700
  4125  0210                     u701:
  4126  0210  2A33               	goto	l37
  4127  0211                     u700:
  4128  0211                     l1378:
  4129                           
  4130                           ;lcd.c: 61:  {;lcd.c: 62:   temp = 0xC0 + b - 1;
  4131  0211  0874               	movf	Lcd_Set_Cursor@b,w
  4132  0212  3EBF               	addlw	191
  4133  0213  00F5               	movwf	??_Lcd_Set_Cursor
  4134  0214  0875               	movf	??_Lcd_Set_Cursor,w
  4135  0215  00FA               	movwf	Lcd_Set_Cursor@temp
  4136                           
  4137                           ;lcd.c: 63:   z = temp>>4;
  4138  0216  087A               	movf	Lcd_Set_Cursor@temp,w
  4139  0217  00F5               	movwf	??_Lcd_Set_Cursor
  4140  0218  3004               	movlw	4
  4141  0219                     u715:
  4142  0219  1003               	clrc
  4143  021A  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4144  021B  3EFF               	addlw	-1
  4145  021C  1D03               	skipz
  4146  021D  2A19               	goto	u715
  4147  021E  0875               	movf	??_Lcd_Set_Cursor,w
  4148  021F  00F6               	movwf	??_Lcd_Set_Cursor+1
  4149  0220  0876               	movf	??_Lcd_Set_Cursor+1,w
  4150  0221  00F8               	movwf	Lcd_Set_Cursor@z
  4151  0222                     l1380:
  4152                           
  4153                           ;lcd.c: 64:   y = temp & 0x0F;
  4154  0222  087A               	movf	Lcd_Set_Cursor@temp,w
  4155  0223  390F               	andlw	15
  4156  0224  00F5               	movwf	??_Lcd_Set_Cursor
  4157  0225  0875               	movf	??_Lcd_Set_Cursor,w
  4158  0226  00F9               	movwf	Lcd_Set_Cursor@y
  4159  0227                     l1382:
  4160                           
  4161                           ;lcd.c: 65:   Lcd_Cmd(z);
  4162  0227  0878               	movf	Lcd_Set_Cursor@z,w
  4163  0228  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  4164  022D                     l1384:
  4165                           
  4166                           ;lcd.c: 66:   Lcd_Cmd(y);
  4167  022D  0879               	movf	Lcd_Set_Cursor@y,w
  4168  022E  120A  158A  2791  120A  118A  	fcall	_Lcd_Cmd
  4169  0233                     l37:
  4170  0233  0008               	return
  4171  0234                     __end_of_Lcd_Set_Cursor:
  4172                           
  4173                           	psect	text19
  4174  0F51                     __ptext19:	
  4175 ;; *************** function _Lcd_Clear *****************
  4176 ;; Defined at:
  4177 ;;		line 43 in file "lcd.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;		None
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0, pclath, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4191 ;;      Params:         0       0       0       0       0
  4192 ;;      Locals:         0       0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0
  4194 ;;      Totals:         0       0       0       0       0
  4195 ;;Total ram usage:        0 bytes
  4196 ;; Hardware stack levels used: 1
  4197 ;; Hardware stack levels required when called: 2
  4198 ;; This function calls:
  4199 ;;		_Lcd_Cmd
  4200 ;; This function is called by:
  4201 ;;		_Alarma
  4202 ;;		_main
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206  0F51                     _Lcd_Clear:	
  4207                           ;psect for function _Lcd_Clear
  4208                           
  4209  0F51                     l1364:	
  4210                           ;incstack = 0
  4211                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4212                           
  4213                           
  4214                           ;lcd.c: 45:  Lcd_Cmd(0);
  4215  0F51  3000               	movlw	0
  4216  0F52  120A  158A  2791  120A  158A  	fcall	_Lcd_Cmd
  4217                           
  4218                           ;lcd.c: 46:  Lcd_Cmd(1);
  4219  0F57  3001               	movlw	1
  4220  0F58  120A  158A  2791  120A  158A  	fcall	_Lcd_Cmd
  4221  0F5D                     l31:
  4222  0F5D  0008               	return
  4223  0F5E                     __end_of_Lcd_Clear:
  4224                           
  4225                           	psect	text20
  4226  0F91                     __ptext20:	
  4227 ;; *************** function _Lcd_Cmd *****************
  4228 ;; Defined at:
  4229 ;;		line 34 in file "lcd.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  a               1    wreg     unsigned char 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  a               1    3[COMMON] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0, pclath, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4243 ;;      Params:         0       0       0       0       0
  4244 ;;      Locals:         1       0       0       0       0
  4245 ;;      Temps:          2       0       0       0       0
  4246 ;;      Totals:         3       0       0       0       0
  4247 ;;Total ram usage:        3 bytes
  4248 ;; Hardware stack levels used: 1
  4249 ;; Hardware stack levels required when called: 1
  4250 ;; This function calls:
  4251 ;;		_Lcd_Port
  4252 ;; This function is called by:
  4253 ;;		_Lcd_Clear
  4254 ;;		_Lcd_Set_Cursor
  4255 ;;		_Lcd_Init
  4256 ;;		_Lcd_Shift_Right
  4257 ;;		_Lcd_Shift_Left
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261  0F91                     _Lcd_Cmd:	
  4262                           ;psect for function _Lcd_Cmd
  4263                           
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4267                           ;Lcd_Cmd@a stored from wreg
  4268  0F91  00F3               	movwf	Lcd_Cmd@a
  4269  0F92                     l1334:
  4270                           
  4271                           ;lcd.c: 34: void Lcd_Cmd(char a);lcd.c: 35: {;lcd.c: 36:  RD2 = 0;
  4272  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  4273  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  4274  0F94  1108               	bcf	8,2	;volatile
  4275  0F95                     l1336:
  4276                           
  4277                           ;lcd.c: 37:  Lcd_Port(a);
  4278  0F95  0873               	movf	Lcd_Cmd@a,w
  4279  0F96  120A  118A  2082  120A  158A  	fcall	_Lcd_Port
  4280  0F9B                     l1338:
  4281                           
  4282                           ;lcd.c: 38:  RD3 = 1;
  4283  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  4284  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  4285  0F9D  1588               	bsf	8,3	;volatile
  4286  0F9E                     l1340:
  4287                           
  4288                           ;lcd.c: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  4289  0F9E  3006               	movlw	6
  4290  0F9F  00F2               	movwf	??_Lcd_Cmd+1
  4291  0FA0  3030               	movlw	48
  4292  0FA1  00F1               	movwf	??_Lcd_Cmd
  4293  0FA2                     u1487:
  4294  0FA2  0BF1               	decfsz	??_Lcd_Cmd,f
  4295  0FA3  2FA2               	goto	u1487
  4296  0FA4  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4297  0FA5  2FA2               	goto	u1487
  4298  0FA6  0000               	nop
  4299  0FA7                     l1342:
  4300                           
  4301                           ;lcd.c: 40:         RD3 = 0;
  4302  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  4303  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  4304  0FA9  1188               	bcf	8,3	;volatile
  4305  0FAA                     l28:
  4306  0FAA  0008               	return
  4307  0FAB                     __end_of_Lcd_Cmd:
  4308                           
  4309                           	psect	text21
  4310  0082                     __ptext21:	
  4311 ;; *************** function _Lcd_Port *****************
  4312 ;; Defined at:
  4313 ;;		line 12 in file "lcd.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  a               1    wreg     unsigned char 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  a               1    0[COMMON] unsigned char 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4327 ;;      Params:         0       0       0       0       0
  4328 ;;      Locals:         1       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0
  4330 ;;      Totals:         1       0       0       0       0
  4331 ;;Total ram usage:        1 bytes
  4332 ;; Hardware stack levels used: 1
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_Lcd_Cmd
  4337 ;;		_Lcd_Init
  4338 ;;		_Lcd_Write_Char
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342  0082                     _Lcd_Port:	
  4343                           ;psect for function _Lcd_Port
  4344                           
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _Lcd_Port: [wreg]
  4348                           ;Lcd_Port@a stored from wreg
  4349  0082  00F0               	movwf	Lcd_Port@a
  4350  0083                     l1324:
  4351                           
  4352                           ;lcd.c: 12: void Lcd_Port(char a);lcd.c: 13: {;lcd.c: 14:  if(a & 1)
  4353  0083  1C70               	btfss	Lcd_Port@a,0
  4354  0084  2886               	goto	u631
  4355  0085  2887               	goto	u630
  4356  0086                     u631:
  4357  0086  288B               	goto	l17
  4358  0087                     u630:
  4359  0087                     l1326:
  4360                           
  4361                           ;lcd.c: 15:   RD4 = 1;
  4362  0087  1283               	bcf	3,5	;RP0=0, select bank0
  4363  0088  1303               	bcf	3,6	;RP1=0, select bank0
  4364  0089  1608               	bsf	8,4	;volatile
  4365  008A  288E               	goto	l18
  4366  008B                     l17:	
  4367                           ;lcd.c: 16:  else
  4368                           
  4369                           
  4370                           ;lcd.c: 17:   RD4 = 0;
  4371  008B  1283               	bcf	3,5	;RP0=0, select bank0
  4372  008C  1303               	bcf	3,6	;RP1=0, select bank0
  4373  008D  1208               	bcf	8,4	;volatile
  4374  008E                     l18:
  4375                           
  4376                           ;lcd.c: 19:  if(a & 2)
  4377  008E  1CF0               	btfss	Lcd_Port@a,1
  4378  008F  2891               	goto	u641
  4379  0090  2892               	goto	u640
  4380  0091                     u641:
  4381  0091  2894               	goto	l19
  4382  0092                     u640:
  4383  0092                     l1328:
  4384                           
  4385                           ;lcd.c: 20:   RD5 = 1;
  4386  0092  1688               	bsf	8,5	;volatile
  4387  0093  2895               	goto	l20
  4388  0094                     l19:	
  4389                           ;lcd.c: 21:  else
  4390                           
  4391                           
  4392                           ;lcd.c: 22:   RD5 = 0;
  4393  0094  1288               	bcf	8,5	;volatile
  4394  0095                     l20:
  4395                           
  4396                           ;lcd.c: 24:  if(a & 4)
  4397  0095  1D70               	btfss	Lcd_Port@a,2
  4398  0096  2898               	goto	u651
  4399  0097  2899               	goto	u650
  4400  0098                     u651:
  4401  0098  289B               	goto	l21
  4402  0099                     u650:
  4403  0099                     l1330:
  4404                           
  4405                           ;lcd.c: 25:   RD6 = 1;
  4406  0099  1708               	bsf	8,6	;volatile
  4407  009A  289C               	goto	l22
  4408  009B                     l21:	
  4409                           ;lcd.c: 26:  else
  4410                           
  4411                           
  4412                           ;lcd.c: 27:   RD6 = 0;
  4413  009B  1308               	bcf	8,6	;volatile
  4414  009C                     l22:
  4415                           
  4416                           ;lcd.c: 29:  if(a & 8)
  4417  009C  1DF0               	btfss	Lcd_Port@a,3
  4418  009D  289F               	goto	u661
  4419  009E  28A0               	goto	u660
  4420  009F                     u661:
  4421  009F  28A2               	goto	l23
  4422  00A0                     u660:
  4423  00A0                     l1332:
  4424                           
  4425                           ;lcd.c: 30:   RD7 = 1;
  4426  00A0  1788               	bsf	8,7	;volatile
  4427  00A1  28A3               	goto	l25
  4428  00A2                     l23:	
  4429                           ;lcd.c: 31:  else
  4430                           
  4431                           
  4432                           ;lcd.c: 32:   RD7 = 0;
  4433  00A2  1388               	bcf	8,7	;volatile
  4434  00A3                     l25:
  4435  00A3  0008               	return
  4436  00A4                     __end_of_Lcd_Port:
  4437  007E                     btemp	set	126	;btemp
  4438  007E                     wtemp0	set	126
  4439                           
  4440                           	psect	config
  4441                           
  4442                           ;Config register CONFIG1 @ 0x2007
  4443                           ;	Oscillator Selection bits
  4444                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  4445                           ;	Watchdog Timer Enable bit
  4446                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4447                           ;	Power-up Timer Enable bit
  4448                           ;	PWRTE = OFF, PWRT disabled
  4449                           ;	RE3/MCLR pin function select bit
  4450                           ;	MCLRE = 0x1, unprogrammed default
  4451                           ;	Code Protection bit
  4452                           ;	CP = OFF, Program memory code protection is disabled
  4453                           ;	Data Code Protection bit
  4454                           ;	CPD = OFF, Data memory code protection is disabled
  4455                           ;	Brown Out Reset Selection bits
  4456                           ;	BOREN = ON, BOR enabled
  4457                           ;	Internal External Switchover bit
  4458                           ;	IESO = 0x1, unprogrammed default
  4459                           ;	Fail-Safe Clock Monitor Enabled bit
  4460                           ;	FCMEN = 0x1, unprogrammed default
  4461                           ;	Low Voltage Programming Enable bit
  4462                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4463                           ;	In-Circuit Debugger Mode bit
  4464                           ;	DEBUG = 0x1, unprogrammed default
  4465  2007                     	org	8199
  4466  2007  2FF2               	dw	12274
  4467                           
  4468                           ;Config register CONFIG2 @ 0x2008
  4469                           ;	Brown-out Reset Selection bit
  4470                           ;	BOR4V = 0x1, unprogrammed default
  4471                           ;	Flash Program Memory Self Write Enable bits
  4472                           ;	WRT = OFF, Write protection off
  4473  2008                     	org	8200
  4474  2008  3FFF               	dw	16383

Data Sizes:
    Strings     99
    Constant    10
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      61
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_14(CODE[10]), STR_12(CODE[10]), STR_10(CODE[10]), STR_8(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 512
		 -> STR_20(CODE[5]), STR_19(CODE[15]), STR_18(CODE[11]), STR_17(CODE[6]), 
		 -> STR_16(CODE[9]), STR_15(CODE[6]), STR_13(CODE[2]), STR_11(CODE[2]), 
		 -> STR_9(CODE[2]), STR_7(CODE[2]), STR_6(CODE[5]), STR_5(CODE[15]), 
		 -> STR_4(CODE[23]), STR_3(CODE[5]), RAM(DATA[512]), STR_2(CODE[10]), 
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _main->_Alarma
    _main->_ver_clave
    _ver_clave->_Lcd_Set_Cursor
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Alarma->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   13397
                                             13 BANK0     28    28      0
                             _Alarma
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _Leer_tecla
                             ___wmul
                    _apagar_led_rojo
                              _mover
                   _prender_led_rojo
                  _prender_led_verde
                       _pulsar_boton
                            _sprintf
                          _ver_clave
 ---------------------------------------------------------------------------------
 (1) _ver_clave                                            4     4      0    3254
                                             11 COMMON     3     3      0
                                              0 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1538
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pulsar_boton                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _prender_led_verde                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _prender_led_rojo                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mover                                                7     7      0     312
                                              4 COMMON     7     7      0
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
 ---------------------------------------------------------------------------------
 (2) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _apagar_led_rojo                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Leer_tecla                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Alarma                                               5     5      0    3388
                                             11 COMMON     3     3      0
                                              0 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     2      2    1560
                                              5 COMMON     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1672
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Alarma
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Lcd_Clear
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_String
   _Leer_tecla
   ___wmul
   _apagar_led_rojo
   _mover
     _Lcd_Shift_Left
       _Lcd_Cmd
     _Lcd_Shift_Right
       _Lcd_Cmd
   _prender_led_rojo
   _prender_led_verde
   _pulsar_boton
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _ver_clave
     _Lcd_Set_Cursor
     _Lcd_Write_String

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     29      3D       5       76.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4B      12        0.0%
ABS                  0      0      4B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Jun 21 09:16:22 2022

       ??_prender_led_rojo 0070                          _x 0049                          pc 0002  
                       l20 0095                         l21 009B                         l22 009C  
                       l23 00A2                         l31 0F5D                         l40 0290  
                       l25 00A3                         l17 008B                         l18 008E  
                       l19 0094                         l43 00DA                         l28 0FAA  
                       l52 0F77                         l37 0233                         l55 0F6A  
                       l49 0FFF                         _y1 0059                         _y2 0053  
                       _y3 0051                         _y4 004F        ??_prender_led_verde 0070  
                       fsr 0004        ___wmul@multiplicand 0072                        l112 0F48  
                      l121 0F40                        l124 0F90                        l132 014E  
                      l118 0F44                        l312 0FB7                        l129 02F5  
                      l314 0FCF                        l139 01E1                        l163 07E4  
                      l180 031B                        l308 047F                        l148 06CA  
                      l190 0369                        l183 0339                        l184 034A  
                      l193 0387                        l185 0342                        l194 0396  
                      l178 0312                        l195 038E                        l179 0323  
                      l188 0360                        l189 0371                        l198 0397  
                      l584 0192                        l594 0114                        _RC0 0038  
                      _RC1 0039                        _RC2 003A                        _RB4 0034  
                      _RB5 0035                        _RD2 0042                        _RB6 0036  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047                        u700 0211  
                      u701 0210                        u630 0087                        u631 0086  
                      u640 0092                        u720 0FFF                        u800 00E1  
                      u641 0091                        u721 0FFE                        u801 00E0  
                      u650 0099                        u730 0157                        u651 0098  
                      u715 0219                        u731 0156                        u660 00A0  
                      u900 0316                        u820 00F3                        u661 009F  
                      u901 0315                        u821 00F2                        u910 031F  
                      u750 0169                        u830 00FD                        u911 031E  
                      u751 0168                        u831 00FC                        u815 00E5  
                      u680 01E8                        u920 0334                        u681 01E7  
                      u921 0333                        u745 015B                        u930 033D  
                      u770 017A                        u850 0110                        u675 00B5  
                      u931 033C                        u771 0179                        u851 010F  
                      u835 00F9                        u860 02F5                        u940 0346  
                      u861 02F4                        u941 0345                        u765 016A  
                      u845 0104                        u950 035B                        u870 01BA  
                      u790 018E                        u695 01F0                        u951 035A  
                      u871 01B9                        u791 018D                        u775 0176  
                      u960 0364                        u880 01E1                        u865 02F1  
                      u961 0363                        u881 01E0                        u785 0182  
                      u970 036D                        u890 030D                        u971 036C  
                      u891 030C                        u875 01B6                        u980 0382  
                      u981 0381                        u885 01DD                        u990 038B  
                      u991 038A                        fsr0 0004                        indf 0000  
             _pulsar_boton 0F78                main@buffer1 0033                       l1400 0151  
                     l1330 0099                       l1410 0169                       l1402 0157  
                     l1332 00A0                       l1324 0083                       l1340 0F9E  
                     l1412 017A                       l1404 015A                       l1420 018E  
                     l1500 0145                       l1326 0087                       l1342 0FA7  
                     l1334 0F92                       l1350 00C0                       l1510 01A2  
                     l1502 0193                       l1414 0180                       l1406 0161  
                     l1430 00EB                       l1328 0092                       l1336 0F95  
                     l1360 00D3                       l1352 00C3                       l1344 00A5  
                     l1512 01A7                       l1416 0181                       l1408 0165  
                     l1440 010A                       l1432 00EF                       l1424 00DB  
                     l1600 0407                       l1338 0F9B                       l1370 01F9  
                     l1362 00D7                       l1354 00C7                       l1346 00AF  
                     l1450 0243                       l1530 02F6                       l1522 01BC  
                     l1514 01AD                       l1418 0188                       l1434 00F3  
                     l1426 00E1                       l1442 0110                       l1610 0427  
                     l1602 0411                       l1364 0F51                       l1380 0222  
                     l1372 01FE                       l1356 00CA                       l1348 00B2  
                     l1452 0251                       l1540 032E                       l1532 0307  
                     l1460 0F3D                       l1524 01C9                       l1516 01BA  
                     l1508 0195                       l1436 00FD                       l1428 00E4  
                     l1612 0455                       l1604 0417                       l1620 047B  
                     l1700 055B                       l1382 0227                       l1374 0204  
                     l1366 01E3                       l1358 00D0                       l1390 0FE5  
                     l1454 0257                       l1446 0234                       l1550 035B  
                     l1542 0334                       l1534 030D                       l1630 0FAD  
                     l1526 01CE                       l1462 0F78                       l1438 0103  
                     l1614 045C                       l1606 041E                       l1710 058D  
                     l1702 0561                       l1384 022D                       l1368 01E8  
                     l1376 020B                       l1392 0FEB                       l1480 02C0  
                     l1448 023A                       l1560 038B                       l1552 0364  
                     l1544 033D                       l1536 0316                       l1632 0FB1  
                     l1528 01D4                       l1456 0F45                       l1464 0F7B  
                     l1616 0460                       l1608 0422                       l1800 07B2  
                     l1720 05C2                       l1712 0596                       l1704 0566  
                     l1378 0211                       l1386 0FD0                       l1490 02E8  
                     l1482 02C3                       l1474 0295                       l1562 0392  
                     l1554 036D                       l1546 0346                       l1538 031F  
                     l1634 0FBE                       l1394 0F6B                       l1458 0F41  
                     l1466 0F84                       l1570 03A6                       l1618 0469  
                     l1802 07C8                       l1730 0612                       l1722 05C7  
                     l1714 05A4                       l1706 056C                       l1650 048A  
                     l1642 0480                       l1388 0FD3                       l1484 02D0  
                     l1476 02A4                       l1468 0291                       l1556 037C  
                     l1548 0355                       l1636 0FC5                       l1628 0FAB  
                     l1396 0F5E                       l1580 03D0                       l1572 03AD  
                     l1492 0118                       l1740 0643                       l1732 0620  
                     l1724 05CD                       l1716 05AC                       l1708 0583  
                     l1804 07CD                       l1660 04A6                       l1652 048B  
                     l1644 0484                       l1486 02D3                       l1478 02AD  
                     l1558 0382                       l1638 0FCB                       l1398 014F  
                     l1590 03E9                       l1582 03D8                       l1574 03B2  
                     l1566 039B                       l1494 0120                       l1806 07DC  
                     l1750 06B3                       l1742 0649                       l1734 0628  
                     l1726 05FF                       l1718 05BB                       l1670 04D1  
                     l1662 04AB                       l1654 0490                       l1646 0486  
                     l1488 02E0                       l1584 03DC                       l1568 03A0  
                     l1496 012E                       l1760 06DE                       l1752 06BB  
                     l1744 0692                       l1728 0609                       l1736 0637  
                     l1680 0500                       l1672 04DA                       l1664 04B0  
                     l1656 0495                       l1648 0489                       l1586 03E0  
                     l1578 03B3                       l1498 013B                       l1770 0711  
                     l1762 06E7                       l1746 069C                       l1738 063E  
                     l1690 051F                       l1682 0507                       l1754 06CA  
                     l1674 04E0                       l1666 04BC                       l1658 049D  
                     l1596 03EB                       l1588 03E4                       l1828 03C5  
                     l1780 074A                       l1772 071A                       l1764 06EC  
                     l1756 06D3                       l1748 06A5                       l1692 052D  
                     l1684 050E                       l1676 04ED                       l1668 04C5  
                     l1790 0772                       l1782 074C                       l1774 072F  
                     l1766 06F7                       l1758 06D8                       l1694 0536  
                     l1686 0514                       l1678 04F7                       l1792 077B  
                     l1784 0751                       l1776 0734                       l1768 06FB  
                     l1696 0544                       l1688 0519                       l1794 0789  
                     l1786 075D                       l1778 0744                       l1698 054C  
                     l1796 0798                       l1788 0766                       l1798 07A9  
                     STR_1 007B                       STR_2 004E                       STR_3 0071  
                     STR_4 001D                       STR_5 0034                       STR_6 0076  
                     STR_7 0074                       STR_8 0058                       STR_9 0074  
                     u1000 0392                       u1001 0391                       u1010 03A6  
                     u1011 03A5                       u1020 03E0                       u1021 03DF  
                     u1110 0FCB                       u1030 0406                       u1111 0FCA  
                     u1031 0405                       u1040 0411                       u1200 06E7  
                     u1120 0500                       u1105 0FBF                       u1041 0410  
                     u1201 06E6                       u1121 04FF                       u1050 0417  
                     u1210 06F7                       u1130 0507                       u1051 0416  
                     u1035 0402                       u1211 06F6                       u1131 0506  
                     u1060 0469                       u1220 0798                       u1140 050E  
                     u1061 0468                       u1221 0797                       u1141 050D  
                     u1070 047B                       u1230 07DC                       u1150 0514  
                     u1071 047A                       u1231 07DB                       u1151 0513  
                     u1080 0FB1                       u1240 07E4                       u1160 0561  
                     u1081 0FB0                       u1241 07E3                       u1225 0794  
                     u1161 0560                       u1170 05C2                       u1235 07D8  
                     u1307 073C                       u1171 05C1                       u1180 063E  
                     u1317 0783                       u1181 063D                       u1190 06D3  
                     u1407 0377                       u1095 0FB8                       u1327 0134  
                     u1191 06D2                       u1417 023E                       u1337 0F7F  
                     u1257 04F3                       u1427 024D                       u1347 0F8B  
                     u1267 053E                       u1437 025B                       u1357 019B  
                     u1277 059E                       u1447 02C9                       u1367 01C2  
                     u1287 061A                       u1457 02D9                       u1377 0302  
                     u1297 06AD                       u1467 00C5                       u1387 0329  
                     u1477 00D5                       u1397 0350                       u1487 0FA2  
__end_of_prender_led_verde 0F49          ?_Lcd_Write_String 0075                       _main 0480  
                     btemp 007E                       start 0000         ??_Lcd_Write_String 0077  
          __end_of_Lcd_Cmd 0FAB           ver_clave@buffer1 0020                      ?_main 0070  
                    STR_10 0058                      STR_11 0074                      STR_20 0076  
                    STR_12 0058                      STR_13 0074                      STR_14 0058  
                    STR_15 006B                      STR_16 0062                      STR_17 006B  
                    STR_18 0043                      STR_19 0034            __end_of___lwdiv 0193  
          __end_of___lwmod 0115                      _PORTB 0006                      _PORTC 0007  
                    _PORTD 0008                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _clave 004D            __end_of_dpowers 001D  
                    _mover 0193                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0480                 _Leer_tecla 02F6  
         __end_of_Lcd_Init 0291           __end_of_Lcd_Port 00A4            __initialization 07E7  
             __end_of_main 07E7                     ??_main 002D          ??_apagar_led_rojo 0070  
                   ?_mover 0070                  ??_Lcd_Cmd 0071                     _Alarma 0291  
                   _Estado 004B                     ___wmul 0FAB                  ??___lwdiv 0074  
                ??___lwmod 007C                     _verifi 0055                     mover@c 0077  
                ??_sprintf 0023            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
              ?_Leer_tecla 0070          __end_of_Lcd_Clear 0F5E             __pcstackCOMMON 0070  
             __pidataBANK0 0080              __end_of_mover 01E2             _Lcd_Set_Cursor 01E2  
           _Lcd_Shift_Left 0F5E                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                  ??_mover 0074                 __pbssBANK0 0049                    ?_Alarma 0070  
               __pmaintext 0480                    ?___wmul 0070     __end_of_Lcd_Set_Cursor 0234  
                  Alarma@a 0020     __end_of_Lcd_Shift_Left 0F6B          ??_Lcd_Shift_Right 0074  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 00A4                    _Lcd_Cmd 0F91            _apagar_led_rojo 0F3D  
                  ___lwdiv 014F                    ___lwmod 00DB            ?_Lcd_Set_Cursor 0074  
                  __ptext1 0115                    __ptext2 0398                    __ptext3 00DB  
                  __ptext4 014F                    __ptext5 0F78                    __ptext6 0F45  
                  __ptext7 0F41                    __ptext8 0193                    __ptext9 0F6B  
                  _dpowers 0013            ?_Lcd_Shift_Left 0070                    _sprintf 0398  
                  clrloop0 0F4A     __end_of_Lcd_Write_Char 00DB       end_of_initialization 07FC  
        __end_of_ver_clave 014F                  Lcd_Port@a 0070           _prender_led_rojo 0F41  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075          Lcd_Write_String@i 0077  
             ??_Leer_tecla 0070    __end_of_apagar_led_rojo 0F41             __end_of_Alarma 02F6  
                _Lcd_Clear 0F51             __end_of___wmul 0FD0           _Lcd_Write_String 0FD0  
       __end_of_Leer_tecla 0398        start_initialization 07E7              ?_pulsar_boton 0070  
                 ??_Alarma 007B                 ?_Lcd_Clear 0070            _Lcd_Shift_Right 0F6B  
                 ??___wmul 0074                __pdataBANK0 005B            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073                  ___latbits 0002             ??_pulsar_boton 0070  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070                sprintf@flag 0027  
              sprintf@prec 0028           ?_apagar_led_rojo 0070           ___lwdiv@dividend 0072  
         ??_Lcd_Set_Cursor 0075                   ?___lwdiv 0070                   ?___lwmod 0078  
         ??_Lcd_Shift_Left 0074                  __pstrings 0003                 mover@c_113 0079  
         ___lwdiv@quotient 0075                   ?_sprintf 0020             ___wmul@product 0074  
  __end_of_Lcd_Shift_Right 0F78                  clear_ram0 0F49   __end_of_prender_led_rojo 0F45  
                 Lcd_Cmd@a 0073                ??_Lcd_Clear 0074                  _ver_clave 0115  
              __stringbase 0012          ___wmul@multiplier 0070           ??_Lcd_Write_Char 0071  
                main@tecla 0047                   _Lcd_Init 0234                   _Lcd_Port 0082  
 __end_of_Lcd_Write_String 1000       __end_of_pulsar_boton 0F91                 ?_ver_clave 0070  
       __end_of__stringtab 0013                 sprintf@val 0029            ___lwdiv@divisor 0070  
          ___lwdiv@counter 0077                   __ptext10 0F5E                   __ptext11 0F3D  
                 __ptext20 0F91                   __ptext12 0FAB                   __ptext21 0082  
                 __ptext13 02F6                   __ptext14 0234                   __ptext15 0291  
                 __ptext16 0FD0                   __ptext17 00A4                   __ptext18 01E2  
                 __ptext19 0F51           ?_Lcd_Shift_Right 0070                   _intentos 0057  
                 _password 005B         Lcd_Write_Char@temp 0072                  sprintf@ap 0026  
                sprintf@sp 002B           ___lwmod@dividend 007A                  stringcode 000D  
              ??_ver_clave 007B         Lcd_Set_Cursor@temp 007A                   sprintf@c 002C  
                 sprintf@f 0020            ___lwmod@divisor 0078            ___lwmod@counter 007D  
                 stringdir 000D                   stringtab 0003          _prender_led_verde 0F45  
       ?_prender_led_verde 0070          ?_prender_led_rojo 0070  
